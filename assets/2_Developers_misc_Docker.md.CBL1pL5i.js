import{_ as s,c as a,o as i,ag as n}from"./chunks/framework.BRQrZDXk.js";const k=JSON.parse('{"title":"Welcome to the Docker Installation Guide for Open Library Developers","description":"","frontmatter":{},"headers":[],"relativePath":"2_Developers/misc/Docker.md","filePath":"2_Developers/misc/Docker.md"}'),o={name:"2_Developers/misc/Docker.md"};function t(r,e,l,p,h,d){return i(),a("div",null,e[0]||(e[0]=[n(`<p>COPIED FROM: <a href="https://github.com/internetarchive/openlibrary/blob/e8966d9e1cc8f2515376468e72fee4a14c5af05c/docker/README.md" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/blob/e8966d9e1cc8f2515376468e72fee4a14c5af05c/docker/README.md</a> We should delete the one in the repo in favor of this (I think)</p><h1 id="welcome-to-the-docker-installation-guide-for-open-library-developers" tabindex="-1">Welcome to the Docker Installation Guide for Open Library Developers <a class="header-anchor" href="#welcome-to-the-docker-installation-guide-for-open-library-developers" aria-label="Permalink to &quot;Welcome to the Docker Installation Guide for Open Library Developers&quot;">​</a></h1><h2 id="prerequisites-troubleshooting" tabindex="-1">Prerequisites &amp; Troubleshooting <a class="header-anchor" href="#prerequisites-troubleshooting" aria-label="Permalink to &quot;Prerequisites &amp; Troubleshooting&quot;">​</a></h2><p>The openlibrary repository <em>must</em> be cloned with <code>ssh</code> and <em>not</em> <code>https</code> so that git submodules can be fetched correctly. See the <a href="https://github.com/internetarchive/openlibrary/wiki/Git-Cheat-Sheet" target="_blank" rel="noreferrer">Git Cheat Sheet</a> for more, including how to fix this if you use <code>git clone https://...</code></p><p>Windows users should see <a href="https://github.com/internetarchive/openlibrary/wiki/Git-Cheat-Sheet#fix-line-endings-symlinks-and-git-submodules-only-for-windows-users-not-using-a-linux-vm" target="_blank" rel="noreferrer">Fix line endings, symlinks, and git submodules</a>.</p><p>Before attempting to build openlibrary using the Docker instructions below, please read through these opening notes about setting up Docker. If you encounter any errors, the following section may serve as a troubleshooting guide.</p><h3 id="install-docker-engine-or-docker-desktop" tabindex="-1">Install Docker Engine or Docker Desktop <a class="header-anchor" href="#install-docker-engine-or-docker-desktop" aria-label="Permalink to &quot;Install Docker Engine or Docker Desktop&quot;">​</a></h3><p>Linux users (including those using a VM), can install Docker Engine or Docker Desktop. Docker has an <a href="https://docs.docker.com/desktop/faqs/linuxfaqs/" target="_blank" rel="noreferrer">FAQ about the difference</a> between the two. Windows and macOS users should use Docker Desktop as of early 2023.</p><ul><li>Docker Engine: <a href="https://docs.docker.com/engine/install/#server" target="_blank" rel="noreferrer">https://docs.docker.com/engine/install/#server</a> (tested with 19.*)</li><li>Docker Desktop: <a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer">https://docs.docker.com/get-docker/</a></li></ul><h3 id="a-note-on-docker-compose-and-docker-compose" tabindex="-1">A note on <code>docker-compose</code> and <code>docker compose</code> <a class="header-anchor" href="#a-note-on-docker-compose-and-docker-compose" aria-label="Permalink to &quot;A note on \`docker-compose\` and \`docker compose\`&quot;">​</a></h3><p>As of early 2023, following the installation instructions on Docker&#39;s website will install either Docker Desktop, which includes Docker Compose v2, or <code>docker-ce</code> and <code>docker-compose-plugin</code> (Linux only), both of which obviate the need to install <code>docker-compose</code> v1 separately.</p><p>Further, Compose V1 will <a href="https://docs.docker.com/compose/compose-v2/" target="_blank" rel="noreferrer">no longer be supported by the end of June 2023</a> and will be removed from Docker Desktop. These directions are written for Compose V2, hence the use of <code>docker compose</code> rather than <code>docker-compose</code>. <code>docker compose</code> is <a href="https://docs.docker.com/compose/compose-v2/#differences-between-compose-v1-and-compose-v2" target="_blank" rel="noreferrer">meant to be a drop-in replacement</a> for <code>docker-compose</code>.</p><p>If for some reason one cannot use a current version of Docker that includes the Docker Compose plugin, it can <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer">be installed separately</a></p><p>Finally, as of this writing (early 2023), the <code>docker-compose</code> that comes with relatively recent Linux distributions (e.g. Ubuntu 22.04) still works if it is already installed.</p><h4 id="test-that-docker-works" tabindex="-1">Test that Docker works <a class="header-anchor" href="#test-that-docker-works" aria-label="Permalink to &quot;Test that Docker works&quot;">​</a></h4><p>Before continuing, ensure you can successfully run Docker&#39;s hello-world container.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run hello-world</span></span></code></pre></div><p>The output should include a <code>Hello from Docker!</code> message that will confirm everything is working with Docker and you can continue.</p><p>If Docker is unable to pull the <code>hello-world:latest</code> image from Docker Hub, try disabling your VPN if one is installed.</p><p>Linux users, note the lack of <code>sudo</code> before <code>docker run hello-world</code>. See the <a href="https://docs.docker.com/engine/install/linux-postinstall/" target="_blank" rel="noreferrer">Linux post-installation instructions</a> if you see the following error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/create&quot;: dial unix /var/run/docker.sock: connect: permission denied.</span></span>
<span class="line"><span>See &#39;docker run --help&#39;.</span></span></code></pre></div><h3 id="cloning-the-open-library-repository" tabindex="-1">Cloning the Open Library repository <a class="header-anchor" href="#cloning-the-open-library-repository" aria-label="Permalink to &quot;Cloning the Open Library repository&quot;">​</a></h3><p>If you have not yet forked and cloned the openlibrary repository, please see <a href="https://github.com/internetarchive/openlibrary/wiki/Git-Cheat-Sheet#forking-and-cloning-the-open-library-repository" target="_blank" rel="noreferrer">Forking and Cloning the Open Library Repository</a>.</p><p>Make sure you <code>git clone</code> openlibrary using <code>ssh</code> instead of <code>https</code> as git submodules (e.g. <code>infogami</code> and <code>acs</code>) may not fetch correctly otherwise. See <a href="https://github.com/internetarchive/openlibrary/wiki/Git-Cheat-Sheet#modifying-a-repository-wrongly-cloned-with-https-or-one-that-is-missing-the-infogami-module" target="_blank" rel="noreferrer">Modifying a repository wrongly cloned with https</a> if you cloned with <code>https</code>.</p><h2 id="setup-commands" tabindex="-1">Setup Commands <a class="header-anchor" href="#setup-commands" aria-label="Permalink to &quot;Setup Commands&quot;">​</a></h2><h3 id="for-windows-users-only" tabindex="-1">For Windows Users Only <a class="header-anchor" href="#for-windows-users-only" aria-label="Permalink to &quot;For Windows Users Only&quot;">​</a></h3><p>Windows users should see <a href="https://github.com/internetarchive/openlibrary/wiki/Git-Cheat-Sheet#fix-line-endings-symlinks-and-git-submodules-only-for-windows-users-not-using-a-linux-vm" target="_blank" rel="noreferrer">Fix line endings, symlinks, and git submodules</a>. Skipping those steps will likely prevent the containers from coming up.</p><h3 id="for-users-of-macs-containing-an-m1-chip" tabindex="-1">For Users of Macs Containing an M1 Chip <a class="header-anchor" href="#for-users-of-macs-containing-an-m1-chip" aria-label="Permalink to &quot;For Users of Macs Containing an M1 Chip&quot;">​</a></h3><p>Please use <a href="https://docs.docker.com/desktop/mac/release-notes/" target="_blank" rel="noreferrer">Docker Desktop &gt;= 4.3.0</a> and make sure that Docker Desktop Preferences <code>General / Use Docker Compose V2</code> is checked so that it is no longer required to install Rosetta 2 to run Docker.</p><p>If you are experiencing issues building JS, you may need to increase the RAM available to Docker. The defaults of 2GB ram and 1GB Swap are not enough. We recommend requirements of 4GB ram and 2GB swap. This resolved the error message of <code>Killed</code> when running <code>build-assets</code>.</p><p>If you are experiencing this issue:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>failed to solve: openlibrary/olbase:latest: failed to resolve source metadata for docker.io/openlibrary/olbase:latest: no match for platform in manifest: not found</span></span></code></pre></div><p>Update the file <code>docker/Dockerfile.oldev</code> line 1 from: <code>FROM openlibrary/olbase:latest</code> to: <code>FROM --platform=linux/amd64 openlibrary/olbase:latest</code></p><h3 id="for-all-users" tabindex="-1">For All Users <a class="header-anchor" href="#for-all-users" aria-label="Permalink to &quot;For All Users&quot;">​</a></h3><p>All commands are from the project root directory, where <code>compose.yaml</code> is (i.e. <code>path/to/your/forked/and/cloned/openlibrary</code>):</p><h4 id="build-the-images" tabindex="-1">Build the images <a class="header-anchor" href="#build-the-images" aria-label="Permalink to &quot;Build the images&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker compose build</span></span></code></pre></div><p>This can take from a few minutes to more than 15 on older hardware. If for some reason the build fails, it&#39;s worth running again, as sometimes downloads time out.</p><h4 id="start-the-app" tabindex="-1">Start the app <a class="header-anchor" href="#start-the-app" aria-label="Permalink to &quot;Start the app&quot;">​</a></h4><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Ctrl-C to stop</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # or, start in detached (silent) mode</span></span></code></pre></div><p>You will know the environment is done loading when the text stops furiously scrolling by and you see the following repeating every few seconds on the console:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>infobase_1      | 172.19.0.5:45716 - - [16/Feb/2023 16:54:10] &quot;HTTP/1.1 GET /openlibrary.org/log/2023-02-16:0&quot; - 200 OK</span></span>
<span class="line"><span>infobase_1      | 172.19.0.5:45730 - - [16/Feb/2023 16:54:15] &quot;HTTP/1.1 GET /openlibrary.org/log/2023-02-16:0&quot; - 200 OK</span></span>
<span class="line"><span>infobase_1      | 172.19.0.5:41790 - - [16/Feb/2023 16:54:20] &quot;HTTP/1.1 GET /openlibrary.org/log/2023-02-16:0&quot; - 200 OK</span></span></code></pre></div><p>At this point, visit <a href="http://localhost:8080" target="_blank" rel="noreferrer">http://localhost:8080</a> and you should see the Open Library banner image with &quot;development version&quot; emblazoned upon it to signify that it&#39;s running from your local development server. From here you can <a href="http://localhost:8080/account/login" target="_blank" rel="noreferrer">log in locally</a>.</p><p>That&#39;s it for the Docker set up. You can read on for more about Docker, including addressing possible errors, how to gracefully shut down the Docker development environment. Or you can look at the &quot;Contributing&quot; or &quot;Learning the Code&quot; sections of the <a href="https://github.com/internetarchive/openlibrary/blob/master/CONTRIBUTING.md" target="_blank" rel="noreferrer">Getting Started</a> guide for more on git, how to find a good first issue to work on, how to develop for the front end, etc.</p><h3 id="possible-errors" tabindex="-1">Possible errors <a class="header-anchor" href="#possible-errors" aria-label="Permalink to &quot;Possible errors&quot;">​</a></h3><h4 id="openlibrary-web-1-exec-docker-ol-web-start-sh-no-such-file-or-directory-or-usr-bin-env-python-r-no-such-file-or-directory" tabindex="-1">&quot;openlibrary-web-1 | exec docker/ol-web-start.sh: no such file or directory&quot; OR &quot;/usr/bin/env: &#39;python\\r&#39;: No such file or directory&quot; <a class="header-anchor" href="#openlibrary-web-1-exec-docker-ol-web-start-sh-no-such-file-or-directory-or-usr-bin-env-python-r-no-such-file-or-directory" aria-label="Permalink to &quot;&quot;openlibrary-web-1 | exec docker/ol-web-start.sh: no such file or directory&quot; OR &quot;/usr/bin/env: &#39;python\\r&#39;: No such file or directory&quot;&quot;">​</a></h4><p>These errors may appear in different containers or with different file names, but look for file-not-found type errors where <code>\\r</code> is in the filename, or there&#39;s <code>exec</code>, a path that seems to exist, and a <code>no such file or directory</code> error, e.g. <code>openlibrary-web-1 | exec docker/ol-web-start.sh: no such file or directory</code></p><p>The likely cause here is that text files were given CRLF line endings during cloning+checkout. See <a href="https://github.com/internetarchive/openlibrary/wiki/Git-Cheat-Sheet#fix-line-endings-symlinks-and-git-submodules-only-for-windows-users-not-using-a-linux-vm" target="_blank" rel="noreferrer">Fix line endings, symlinks, and git submodules</a>.</p><p>Note: after fixing this error, be on the lookout for another error that will appear almost immediately after running <code>docker compose up</code> that mentions something about the <code>role</code> of <code>openlibrary</code> not existing. Read on for how to address that.</p><h4 id="an-error-similar-to-fatal-role-openlibrary-does-not-exist" tabindex="-1">An error similar to: FATAL: role &quot;openlibrary&quot; does not exist <a class="header-anchor" href="#an-error-similar-to-fatal-role-openlibrary-does-not-exist" aria-label="Permalink to &quot;An error similar to: FATAL: role &quot;openlibrary&quot; does not exist&quot;">​</a></h4><p>Look for errors that appear very soon after running <code>docker compose up</code> that come from the <code>openlibrary-db-1</code> container when it first starts mentioning something about the <code>role</code> of <code>openlibrary</code> not existing.</p><p>In this case, try the steps in <a href="#fully-resetting-your-environment">Fully Resetting Your Environment</a></p><p>Note: please update this README with the exact wording of the error if you run into it.</p><h4 id="oserror-errno-12-cannot-allocate-memory-openlibrary-openlibrary-core" tabindex="-1">&quot;OSError: [Errno 12] Cannot allocate memory: &#39;/openlibrary/openlibrary/core&#39;&quot; <a class="header-anchor" href="#oserror-errno-12-cannot-allocate-memory-openlibrary-openlibrary-core" aria-label="Permalink to &quot;&quot;OSError: [Errno 12] Cannot allocate memory: &#39;/openlibrary/openlibrary/core&#39;&quot;&quot;">​</a></h4><p><code>OSError: [Errno 12] Cannot allocate memory:</code> could occur in conjunction with <code>/openlibrary/openlibrary/core</code> or any number of files. Simply try increasing free RAM or increasing swap/page file/virtual memory for your operating system.</p><h4 id="no-module-named-infogami" tabindex="-1">&quot;No module named &#39;infogami&#39;&quot; <a class="header-anchor" href="#no-module-named-infogami" aria-label="Permalink to &quot;&quot;No module named &#39;infogami&#39;&quot;&quot;">​</a></h4><p>The following should populate the target of the <code>infogami</code> symbolic link (i.e. <code>vendor/infogami/</code>):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd path/to/your/cloned/openlibrary</span></span>
<span class="line"><span>git submodule init; git submodule sync; git submodule update</span></span></code></pre></div><p>Windows users may need to see <a href="https://github.com/internetarchive/openlibrary/wiki/Git-Cheat-Sheet#fix-line-endings-symlinks-and-git-submodules-only-for-windows-users-not-using-a-linux-vm" target="_blank" rel="noreferrer">Fix line endings, symlinks, and git submodules</a>.</p><h4 id="no-configuration-file-provided-not-found-when-running-docker-compose-command" tabindex="-1">&quot;no configuration file provided: not found&quot; when running <code>docker compose &lt;command&gt;</code> <a class="header-anchor" href="#no-configuration-file-provided-not-found-when-running-docker-compose-command" aria-label="Permalink to &quot;&quot;no configuration file provided: not found&quot; when running \`docker compose &lt;command&gt;\`&quot;">​</a></h4><p>Ensure you&#39;re running <code>docker compose</code> commands from within the <code>local-openlibrary-dev-directory</code>.</p><h3 id="connectionerror-httpconnectionpool-host-solr-port-8983" tabindex="-1">ConnectionError: HTTPConnectionPool(host=&#39;solr&#39;, port=8983) <a class="header-anchor" href="#connectionerror-httpconnectionpool-host-solr-port-8983" aria-label="Permalink to &quot;ConnectionError: HTTPConnectionPool(host=&#39;solr&#39;, port=8983)&quot;">​</a></h3><p>The full error is something like (line breaks added):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/openlibrary/openlibrary/templates/home/index.html: error in processing</span></span>
<span class="line"><span> template: ConnectionError: HTTPConnectionPool(host=&#39;solr&#39;, port=8983):</span></span>
<span class="line"><span>Max retries exceeded with url: /solr/openlibrary/select (Caused by</span></span>
<span class="line"><span>NameResolutionError(&quot;&lt;urllib3.connection.HTTPConnection object at</span></span>
<span class="line"><span>0x77a95c4e7f90&gt;: Failed to resolve &#39;solr&#39; ([Errno -2] Name or service</span></span>
<span class="line"><span>not known)&quot;)) (falling back to default template)</span></span></code></pre></div><p>The following should get everything running again:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If you see any openlibrary container here, remove them with \`docker rm -f NAME\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># If you see any open library networks here, remove them with \`docker network rm NAME</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # or docker compose up -d</span></span></code></pre></div><p>If you&#39;re curious and want to understand what happened, and why the above likely fixes it, first, verify the <code>solr</code> container is running (e.g. <code>docker ps | grep solr</code>, and then look for something like <code>openlibrary-solr-1</code> that isn&#39;t <code>solr-updater</code>.) If the <code>solr</code> container isn&#39;t running, simply start it with <code>docker compose up solr</code> (or <code>docker compose up -d solr</code>) and that should fix it. If <code>solr</code> is running, verify too that you can also connect to solr at <a href="http://localhost:8983/solr/#/" target="_blank" rel="noreferrer">http://localhost:8983/solr/#/</a>. If you can&#39;t, something else is likely wrong.</p><p>If the <code>solr</code> container is running and the error persists, one cause seems to be that the containers sometimes become disconnected from <code>openlibrary_webnet</code> (though this could happen with <code>openlibrary_dbnet</code> too). <code>openlibrary-web-1</code>/<code>web</code> should be connected to both <code>openlibrary_webnet</code> and <code>openlibrary_dbnet</code>, but when this problem occurs, instead only one is connected. E.g.:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> container</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> inspect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{{.NetworkSettings.Networks}}&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary-web-1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># output: map[openlibrary_dbnet:0xc00037c1c0]</span></span></code></pre></div><p>Because you&#39;ve read this far, you can now directly fix the problem without removing the containers and networks. Simply reconnect the container to the network:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker network connect openlibrary_webnet openlibrary-web-1  # or \`openlibrary_dbnet\` as the case may be.</span></span>
<span class="line"><span>docker container inspect --format &#39;{{.NetworkSettings.Networks}}&#39; openlibrary-web-1</span></span>
<span class="line"><span># output: map[openlibrary_dbnet:0xc00016c460 openlibrary_webnet:0xc00016c540]</span></span></code></pre></div><p>No restart is required. If <code>webnet</code> no longer exists, recreating it <em>should</em> fix things: <code>docker network create openlibrary_webnet</code>.</p><p>To understand a bit more about what&#39;s going on here, there are docker networks configured in <code>compose.yaml</code>. The containers should be able to resolve one another based on the container names (e.g. <code>web</code> and <code>solr</code>), assuming <code>compose.yaml</code> has them on the same netork. For more, see <a href="https://docs.docker.com/compose/networking/" target="_blank" rel="noreferrer">Networking in Compose</a>.</p><h2 id="teardown-commands" tabindex="-1">Teardown commands <a class="header-anchor" href="#teardown-commands" aria-label="Permalink to &quot;Teardown commands&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> path/to/your/cloned/openlibrary</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># stop the app (if started in detached mode)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># start specific service</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-deps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> solr</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># remove all volumes (i.e. reset all databases); perform WHILE RUNNING</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stop</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><p>This exposes the following ports:</p><table tabindex="0"><thead><tr><th>Port</th><th>Service</th></tr></thead><tbody><tr><td>8080</td><td>Open Library main site</td></tr><tr><td>7000</td><td>Infobase</td></tr><tr><td>8983</td><td>Solr</td></tr><tr><td>7075</td><td>Cover store</td></tr></tbody></table><p>For example, to access Solr admin, go to <a href="http://localhost:8983/solr/admin/" target="_blank" rel="noreferrer">http://localhost:8983/solr/admin/</a></p><h2 id="code-updates" tabindex="-1">Code Updates <a class="header-anchor" href="#code-updates" aria-label="Permalink to &quot;Code Updates&quot;">​</a></h2><p>For changes to the frontend (JS, CSS, and HTML/<a href="http://webpy.org/docs/0.3/templetor" target="_blank" rel="noreferrer">Templetor</a> templates), see the <a href="https://github.com/internetarchive/openlibrary/wiki/Frontend-Guide" target="_blank" rel="noreferrer">Frontend Guide</a>.</p><p>Other changes:</p><ul><li><strong>Editing pip packages?</strong> Rebuild the <code>home</code> service: <code>docker compose build home</code></li><li><strong>Editing npm packages?</strong> Run <code>docker compose run --rm home npm install --no-audit</code> (see <a href="https://github.com/internetarchive/openlibrary/issues/2032" target="_blank" rel="noreferrer">#2032</a> for why)</li><li><strong>Editing core dependencies?</strong> You will most likely need to do a full rebuild. This shouldn&#39;t happen too frequently. If you are making this sort of change, you will know exactly what you are doing 😉 See <a href="#developing-the-dockerfile">Developing the Dockerfile</a>.</li></ul><h2 id="useful-runtime-commands" tabindex="-1">Useful Runtime Commands <a class="header-anchor" href="#useful-runtime-commands" aria-label="Permalink to &quot;Useful Runtime Commands&quot;">​</a></h2><p>See Docker&#39;s docs for more: <a href="https://docs.docker.com/compose/reference/overview" target="_blank" rel="noreferrer">https://docs.docker.com/compose/reference/overview</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Read a service&#39;s logs (replace \`web\` with service name)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Show all logs (onetime)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tail=10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Show last 10 lines and follow</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Analyze a container</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Launch terminal in \`web\` service</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install Node.js modules (if you get an error running tests)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Important: npm jobs need to be run inside the Docker environment.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-audit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># build JS/CSS assets:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-assets</span></span></code></pre></div><h2 id="fully-resetting-your-environment" tabindex="-1">Fully Resetting Your Environment <a class="header-anchor" href="#fully-resetting-your-environment" aria-label="Permalink to &quot;Fully Resetting Your Environment&quot;">​</a></h2><p>Been away for a while? Are you getting strange errors you weren&#39;t getting before? Sometimes changes are made to the docker configs which could cause your local environment to break. To do a full reset of your docker environment so that you have the latest of everything:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Stop the site</span></span>
<span class="line"><span>docker compose down</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Build the latest oldev image, without cache, whilst also pulling the latest olbase image from docker hub.</span></span>
<span class="line"><span># This can take from a few minutes to more than 20 on older hardware.</span></span>
<span class="line"><span>docker compose build --pull --no-cache</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Remove any old containers/images</span></span>
<span class="line"><span># If you use docker for other things, and have containers/images you don&#39;t want to lose, be careful with this. But you likely don&#39;t :)</span></span>
<span class="line"><span>docker container prune --filter label=&quot;com.docker.compose.project=openlibrary&quot; --force</span></span>
<span class="line"><span>docker image prune --filter label=&quot;com.docker.compose.project=openlibrary&quot; --force</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Remove volumes that might have outdated dependencies/code</span></span>
<span class="line"><span>docker volume rm openlibrary_ol-build openlibrary_ol-nodemodules openlibrary_ol-vendor</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Bring it back up again</span></span>
<span class="line"><span>docker compose up  # or docker compose up -d</span></span></code></pre></div><h2 id="developing-the-dockerfile" tabindex="-1">Developing the Dockerfile <a class="header-anchor" href="#developing-the-dockerfile" aria-label="Permalink to &quot;Developing the Dockerfile&quot;">​</a></h2><p>If you need to make changes to the dependencies in Dockerfile.olbase, rebuild it with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary/olbase:latest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker/Dockerfile.olbase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 30+ min (Win10Home/Dec 2018)</span></span></code></pre></div><p>This image is automatically rebuilt on deploy by ol-home0 and is pushed to at <a href="https://hub.docker.com/r/openlibrary/olbase" target="_blank" rel="noreferrer">https://hub.docker.com/r/openlibrary/olbase</a>.</p><p>If you&#39;re making changes you think might affect Docker Hub, you can create a branch starting with <code>docker-test</code>, e.g. <code>docker-test-py2py3</code> (no weird chars), to trigger a build in docker hub at e.g. <code>openlibrary/olbase:docker-test-py2py3</code>.</p><h2 id="updating-the-docker-image" tabindex="-1">Updating the Docker Image <a class="header-anchor" href="#updating-the-docker-image" aria-label="Permalink to &quot;Updating the Docker Image&quot;">​</a></h2><p>Pull the changes into your openlibrary repository: <code>git pull</code></p><p>When pulling down new changes you will need to rebuild the JS/CSS assets:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># build JS/CSS assets:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build-assets</span></span></code></pre></div><p>Note: This is only if you already have an existing docker image, this command is unnecessary the first time you build.</p><h2 id="debugging-and-profiling-the-docker-image" tabindex="-1">Debugging and Profiling the Docker Image <a class="header-anchor" href="#debugging-and-profiling-the-docker-image" aria-label="Permalink to &quot;Debugging and Profiling the Docker Image&quot;">​</a></h2><p>See <a href="https://github.com/internetarchive/openlibrary/wiki/Debugging-and-Performance-Profiling" target="_blank" rel="noreferrer">Debugging and Performance Profiling</a> for more information on how to attach a debugger when running in the Docker Container.</p><h2 id="other-commands" tabindex="-1">Other Commands <a class="header-anchor" href="#other-commands" aria-label="Permalink to &quot;Other Commands&quot;">​</a></h2><p><a href="https://github.com/internetarchive/openlibrary/wiki/Deployment-Guide#ol-web1" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/wiki/Deployment-Guide#ol-web1</a></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Launch a temporary container and run tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run Open Library using a local copy of Infogami for development</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose.override.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose.infogami-local.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tail=10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In your browser, navigate to http://localhost:8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># To test Open Library on another version of Python, modify Dockerfile.olbase and then</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># rebuild olbase (see above) and oldev (\`docker compose build\`)</span></span></code></pre></div>`,103)]))}const u=s(o,[["render",t]]);export{k as __pageData,u as default};
