import{_ as a,c as s,o,ag as t}from"./chunks/framework.BRQrZDXk.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"6_Advanced/Anti-Spam-Tools.md","filePath":"6_Advanced/Anti-Spam-Tools.md"}'),n={name:"6_Advanced/Anti-Spam-Tools.md"};function i(l,e,r,c,p,d){return o(),s("div",null,e[0]||(e[0]=[t(`<p><strong>This document is quickly becoming deprecated</strong>, please instead view the <a href="https://github.com/internetarchive/openlibrary/wiki/Disaster-Recovery-&amp;-Immediate-Response#handling-abuse--ddos-denial-of-service-attack" target="_blank" rel="noreferrer">DDOS section of our Disaster Recovery &amp; First Responder&#39;s Guide</a></p><p>The following was originally published by Giovanni Damiola @gdamdam via <a href="http://gio.blog.archive.org/2016/03/10/ol-anti-spam-tools" target="_blank" rel="noreferrer">http://gio.blog.archive.org/2016/03/10/ol-anti-spam-tools</a>. Gio writes:</p><h2 id="measures-taken" tabindex="-1">Measures taken <a class="header-anchor" href="#measures-taken" aria-label="Permalink to &quot;Measures taken&quot;">​</a></h2><p>I’ve added the common words found in the recent spam to the spam words blacklisted mail.com as almost all of the spam was coming from that domain. This may stop some genuine people from registering and making edits. blocked and reverted edits lot of accounts</p><p>Other approaches:</p><p>On <code>ol-db1</code> investigate volume and patterns:</p><ul><li><code>select * from store where key like &#39;account/%/verify&#39; order by id desc limit 50;</code></li></ul><p>Check nginx access logs for common vectoros on <code>ol-www1</code></p><ul><li><code>sudo cat /var/log/nginx/access.log | grep &quot;/people&quot;</code></li><li><code>sudo cat /var/log/nginx/access.log | grep &quot;/account/create&quot;</code></li></ul><p>Sam&#39;s magic sauce:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>netstat -n | /home/samuel/work/reveal-abuse/mktable</span></span>
<span class="line"><span>sudo cat /var/log/nginx/access.log | cut -d &#39; &#39; -f 1 | sort | uniq -c  | sort -n | tail -n 10 | /home/samuel/work/reveal-abuse/reveal | /home/samuel/work/reveal-abuse/shownames</span></span></code></pre></div><h2 id="using-sam-s-legacy-tools" tabindex="-1">Using Sam&#39;s Legacy Tools <a class="header-anchor" href="#using-sam-s-legacy-tools" aria-label="Permalink to &quot;Using Sam&#39;s Legacy Tools&quot;">​</a></h2><p>First, ssh over to <code>ol-www0</code> (which is the entry point for all traffic) and determine who the bad actor(s) are. Because we anonymize IPs, you&#39;ll first have to populate a map of anonymous IPs to IPs we can actually block:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh -A ol-www1</span></span>
<span class="line"><span>netstat -n | /home/samuel/work/reveal-abuse/mktable  # XXX this should probably be added to \`olsystem\`, see: https://github.com/internetarchive/olsystem/issues/45</span></span></code></pre></div><p>Then run:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo tail -n 5000 /var/log/nginx/access.log | cut -d &#39; &#39; -f 1 | sort | uniq -c  | sort -n | tail -n 10 | /home/samuel/work/reveal-abuse/reveal | /home/samuel/work/reveal-abuse/shownames</span></span></code></pre></div><p>Or...</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo tail -n 250000 /1/var/log/nginx/access.log | awk &#39;{print $1}&#39; | sort | uniq -c | sort -nr | head -n 30</span></span></code></pre></div><p>At this point, see <a href="https://github.com/internetarchive/openlibrary/blob/6216cda55295ed6477439af2791b20df3bdadd9d/docker/nginx.conf#L44-L45" target="_blank" rel="noreferrer">nginx.conf</a>, you can add the IPs to /olsystem/etc/nginx/deny.conf or add classes of IPs or user-agents to <code>/etc/nginx/sites-available/openlibrary.conf</code>, e.g.:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    if ($http_user_agent ~* (Slurp|Yahoo|libwww-perl|Java)) {</span></span>
<span class="line"><span>        return 403;</span></span>
<span class="line"><span>    }</span></span></code></pre></div><p>Or, you can block on a per-IP basis in <code>/opt/openlibrary/olsystem/etc/nginx/deny.conf</code>.</p>`,21)]))}const g=a(n,[["render",i]]);export{u as __pageData,g as default};
