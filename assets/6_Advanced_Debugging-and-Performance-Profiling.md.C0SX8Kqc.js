import{_ as o,c as t,o as r,ag as a}from"./chunks/framework.BRQrZDXk.js";const h=JSON.parse('{"title":"Using a Debugger","description":"","frontmatter":{},"headers":[],"relativePath":"6_Advanced/Debugging-and-Performance-Profiling.md","filePath":"6_Advanced/Debugging-and-Performance-Profiling.md"}'),i={name:"6_Advanced/Debugging-and-Performance-Profiling.md"};function n(s,e,l,d,c,p){return r(),t("div",null,e[0]||(e[0]=[a('<p>Are you seeing an error on an Open Library page?</p><p>The <strong>first</strong> thing you should do is check the applications streaming error logs:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker compose logs --tail=10 -f web</span></span></code></pre></div><p>Next, you can add <code>?debug=true</code> to the problematic url in order to reveal the stack trace or profile data.</p><p>This trick is especially useful when you see a nebulous error like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;Sorry. There seems to be a problem with what you were just looking at. We&#39;ve noted the error 2019-02-05/193353339339 and will look into it as soon as possible. Head for home?&quot;</span></span></code></pre></div><p>If the request is a POST, use the browser to inspect the HTML form element and add <code>?debug=true</code> to the <code>action</code> url. If/when the request fails, you should see a useful stack trace.</p><h1 id="using-a-debugger" tabindex="-1">Using a Debugger <a class="header-anchor" href="#using-a-debugger" aria-label="Permalink to &quot;Using a Debugger&quot;">​</a></h1><p>BETA: See <a href="https://github.com/internetarchive/openlibrary/pull/2097" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/pull/2097</a></p><p>Using a debugger is one of the best ways to understand how code works and to find bug fixes. We use <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">VS Code</a> (along with its <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noreferrer">Python extension</a>) to remote debug into the docker container; we can&#39;t use regular debugging because the docker container behaves like a virtual machine.</p><p><img src="https://user-images.githubusercontent.com/6251786/56706388-bd889e00-66e2-11e9-9d9b-449f0458305a.gif" alt="Debugger in action"></p><p>To use:</p><ol><li><code>docker compose up -d</code> as usual and <a href="https://github.com/internetarchive/openlibrary/wiki/Getting-Started#logging-in" target="_blank" rel="noreferrer"><strong>login as admin</strong></a>. (Note this has to be done before changing the docker-compose file; see <a href="https://github.com/internetarchive/openlibrary/issues/2122" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/issues/2122</a> )</li><li>Open the repo in VS Code -- <code>code .</code></li><li>Edit around line 6 of <code>compose.yaml</code> to say <code>workers 1</code> instead of <code>4</code> and <code>timeout</code> to be <code>180000000</code> instead of <code>180</code></li><li>By default, a worker only lives for 500 seconds -- this will interrupt the debugger; this setting should be increased (by e.g. 10x) or removed.</li><li><code>docker compose up -d</code></li><li>Go to <a href="http://localhost:8080/admin/attach_debugger" target="_blank" rel="noreferrer">http://localhost:8080/admin/attach_debugger</a> and click &quot;Start&quot;</li><li>Go to the debug panel (Ctrl+Shift+D) in VS Code, and click &quot;Python: Attach&quot;</li><li>Debug!</li></ol><h2 id="performance-profiling" tabindex="-1">Performance Profiling <a class="header-anchor" href="#performance-profiling" aria-label="Permalink to &quot;Performance Profiling&quot;">​</a></h2><p>Is a page taking a long time to load? Add <code>_profile=true</code> to the url in order to include a profile report. This will give you a report of both the front-end (client side) and the back-end (server side) load times. For a more granular breakdown of the client, follow the developer tools guide in your respective browser, e.g. <a href="https://developers.google.com/web/tools/chrome-devtools/network-performance" target="_blank" rel="noreferrer">https://developers.google.com/web/tools/chrome-devtools/network-performance</a>.</p><h2 id="website-performance" tabindex="-1">Website Performance <a class="header-anchor" href="#website-performance" aria-label="Permalink to &quot;Website Performance&quot;">​</a></h2><p>You can run a webpagetest via <a href="https://www.webpagetest.org/result/180907_EQ_f494162d3f798fbe574d1350cf68de89" target="_blank" rel="noreferrer">https://www.webpagetest.org/result/180907_EQ_f494162d3f798fbe574d1350cf68de89</a> in order to obtain a better picture of openlibrary.org&#39;s performance on various devices given constraints</p>',17)]))}const u=o(i,[["render",n]]);export{h as __pageData,u as default};
