import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.BRQrZDXk.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"6_Advanced/Deployment-Scratchpad.md","filePath":"6_Advanced/Deployment-Scratchpad.md"}'),l={name:"6_Advanced/Deployment-Scratchpad.md"};function t(o,s,p,r,h,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h2 id="deployment-guide" tabindex="-1"><a href="https://github.com/internetarchive/openlibrary/wiki/Deployment-Guide#deploying-openlibrary" target="_blank" rel="noreferrer">Deployment Guide</a> <a class="header-anchor" href="#deployment-guide" aria-label="Permalink to &quot;[Deployment Guide](https://github.com/internetarchive/openlibrary/wiki/Deployment-Guide#deploying-openlibrary)&quot;">â€‹</a></h2><h3 id="a-note-on-docker-compose-and-docker-compose" tabindex="-1">A note on <code>docker-compose</code> and <code>docker compose</code> <a class="header-anchor" href="#a-note-on-docker-compose-and-docker-compose" aria-label="Permalink to &quot;A note on \`docker-compose\` and \`docker compose\`&quot;">â€‹</a></h3><p>As of early 2023, following the installation instructions on Docker&#39;s website will install either Docker Desktop, which includes Docker Compose v2, or <code>docker-ce</code> and <code>docker-compose-plugin</code> (Linux only), both of which obviate the need to install <code>docker-compose</code> v1 separately.</p><p>Further, Compose V1 will <a href="https://docs.docker.com/compose/compose-v2/" target="_blank" rel="noreferrer">no longer be supported by the end of June 2023</a> and will be removed from Docker Desktop. These directions are written for Compose V2, hence the use of <code>docker compose</code> rather than <code>docker-compose</code>. <code>docker compose</code> is <a href="https://docs.docker.com/compose/compose-v2/#differences-between-compose-v1-and-compose-v2" target="_blank" rel="noreferrer">meant to be a drop-in replacement</a> for <code>docker-compose</code>.</p><p>To see an updated document, please review <a href="https://github.com/internetarchive/openlibrary/blob/master/docker/README.md" target="_blank" rel="noreferrer">Docker Instructions</a></p><h3 id="_2021-04-21-deployment" tabindex="-1">2021-04-21 -- Deployment <a class="header-anchor" href="#_2021-04-21-deployment" aria-label="Permalink to &quot;2021-04-21 -- Deployment&quot;">â€‹</a></h3><ul><li>[ ] Open a terminal tab and log into ol-home0</li><li>[ ] Open <a href="https://openlibrary.org/admin?stats" target="_blank" rel="noreferrer">https://openlibrary.org/admin?stats</a> so that you can monitor server status</li><li>[ ] <strong>Warn Slack channels <code>openlibrary</code> and <code>openlibrary-g</code> of imminent downtime!</strong></li><li>[ ] On <code>ol-home0</code> run <code>cd /opt/openlibrary &amp;&amp; sudo git pull origin master</code></li><li>[ ] On <code>ol-home0</code> run <code>/opt/openlibrary/scripts/deployment/deploy.sh</code></li><li>[ ] Run <code>./scripts/deployment/are_servers_in_sync.sh</code> to ensure the three servers are in sync. <ul><li>They were not in sync ðŸ˜• Had to git pull on ol-web2. Shouldn&#39;t be an issue after PR, I believe.</li></ul></li><li>[ ] Copy static files out Docker image and put them on <code>ol-www1</code> <strong>GO LINE BY LINE</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Make a backup of static assets</span></span>
<span class="line"><span>ssh -A ol-www1 &#39;sudo cp -r /opt/openlibrary/openlibrary/static /opt/openlibrary/openlibrary/static_backup&#39;</span></span>
<span class="line"><span>STATIC_DIR=/tmp/ol-static-$(date &#39;+%Y-%m-%d&#39;)</span></span>
<span class="line"><span>docker cp $(docker create --rm oldev:latest):/openlibrary/static $STATIC_DIR</span></span>
<span class="line"><span>rsync -rvz $STATIC_DIR/ ol-www1:$STATIC_DIR</span></span>
<span class="line"><span># TODO: There&#39;s another static dir!</span></span>
<span class="line"><span>ssh -A ol-www1 &quot;sudo mkdir -p /opt/openlibrary/openlibrary/static-new &amp;&amp; sudo cp -r $STATIC_DIR/* /opt/openlibrary/openlibrary/static-new&quot;</span></span>
<span class="line"><span>ssh -A ol-www1 &#39;sudo chown -R openlibrary:openlibrary /opt/openlibrary/openlibrary/static-new&#39;</span></span>
<span class="line"><span>ssh -A ol-www1 &#39;sudo rm -r /opt/openlibrary/openlibrary/static &amp;&amp; sudo mv /opt/openlibrary/openlibrary/static-new /opt/openlibrary/openlibrary/static&#39;</span></span></code></pre></div><ul><li>[ ] Run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh ol-web1 ol-covers0</code></li><li>[ ] Run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh ol-home0 &amp;&amp; docker restart openlibrary_infobase_nginx_1</code></li><li>[ ] Run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh ol-web2</code></li></ul><h3 id="_2021-04-15-deployment" tabindex="-1">2021-04-15 -- Deployment <a class="header-anchor" href="#_2021-04-15-deployment" aria-label="Permalink to &quot;2021-04-15 -- Deployment&quot;">â€‹</a></h3><ul><li>[ ] Open a terminal tab and log into ol-home0</li><li>[ ] Open a terminal tab and log into ol-covers0</li><li>[ ] Open a terminal tab and log into ol-web1</li><li>[ ] Open <a href="https://openlibrary.org/admin?stats" target="_blank" rel="noreferrer">https://openlibrary.org/admin?stats</a> so that you can monitor server status</li><li>[ ] <strong>Warn Slack channels <code>openlibrary</code> and <code>openlibrary-g</code> of imminent downtime!</strong></li><li>[ ] On <code>ol-home0</code><ul><li>[ ] cd /opt/openlibrary</li><li>[ ] sudo git checkout master &amp;&amp; sudo git pull origin master</li><li>[ ] sudo make git</li><li>[ ] cd /opt/olsystem</li><li>[ ] sudo git checkout master &amp;&amp; sudo git pull origin master # -- Enter GitHub userid &amp; token</li><li>[ ] cd /opt/booklending_utils</li><li>[ ] sudo git checkout master &amp;&amp; sudo git pull origin master # -- Enter git.archive.org userid &amp; password</li><li>[ ] cd /opt/openlibrary</li></ul></li><li>[ ] Repeat the same steps on <code>ol-covers0</code> and <code>ol-web1</code> # <code>covers</code> does not need booklending_utils</li><li>[ ] Run <code>./scripts/deployment/are_servers_in_sync.sh</code> to ensure the three servers are in sync.</li><li>[ ] On <code>ol-home0</code> run <code>/opt/openlibrary/scripts/deployment/deploy.sh</code><ul><li>NOTE: Run sudo (note note: it superflously rsyncs the repos over to the other clients; we might want to rm the step? Or maybe not git pull?)</li></ul></li><li>[ ] Copy static files out Docker image and put them on <code>ol-www1</code></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Make a backup of static assets</span></span>
<span class="line"><span>ssh -A ol-www1 &#39;sudo cp -r /opt/openlibrary/openlibrary/static /opt/openlibrary/openlibrary/static_backup&#39;</span></span>
<span class="line"><span>STATIC_DIR=/tmp/ol-static-$(date &#39;+%Y-%m-%d&#39;)</span></span>
<span class="line"><span>docker cp $(docker create --rm oldev:latest):/openlibrary/static $STATIC_DIR</span></span>
<span class="line"><span>rsync -rvz $STATIC_DIR/ ol-www1:$STATIC_DIR</span></span>
<span class="line"><span># TODO: There&#39;s another static dir!</span></span>
<span class="line"><span>ssh -A ol-www1 &quot;sudo mkdir -p /opt/openlibrary/openlibrary/static-new &amp;&amp; sudo cp -r $STATIC_DIR/* /opt/openlibrary/openlibrary/static-new&quot;</span></span>
<span class="line"><span>ssh -A ol-www1 &#39;sudo chown -R openlibrary:openlibrary /opt/openlibrary/openlibrary/static-new&#39;</span></span>
<span class="line"><span>ssh -A ol-www1 &#39;sudo rm -r /opt/openlibrary/openlibrary/static &amp;&amp; sudo mv /opt/openlibrary/openlibrary/static-new /opt/openlibrary/openlibrary/static&#39;</span></span></code></pre></div><ul><li>[ ] Run <code>~/are_servers_in_sync.sh</code> to ensure the three servers have the same Docker latest.</li><li>[ ] Deploy to ol-web2</li></ul><h3 id="_2020-03-x" tabindex="-1">2020-03-X? <a class="header-anchor" href="#_2020-03-x" aria-label="Permalink to &quot;2020-03-X?&quot;">â€‹</a></h3><p><strong>ADD A PIECE ON ROLLBACK WITH AND WITHOUT VOLUME MOUNTS</strong></p><ul><li><a href="https://docs.docker.com/engine/reference/commandline/tag" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/commandline/tag</a> To do a rollback on <code>ol-home0</code>:</li></ul><ol><li><code>docker image ls</code></li><li>Write down the Docker <code>IMAGE ID</code> that you want to roll back to.</li><li><code>docker tag oldev:&lt;IMAGE ID&gt; oldev:latest</code></li><li>Run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh</code></li><li>Repeat the above steps as required on <code>ol-covers0</code>, <code>ol-web1</code>, <code>ol-web2</code></li></ol><p><strong>EnvVariable $OLDEV_DOCKER_SHA for which Docker image to use oldev:latest vs oldev:SomeSHA</strong></p><p>After deploy.sh finishes successfully,</p><ul><li>[ ] run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh</code> on: <ul><li>[ ] ol-home0</li><li>[ ] ol-covers0</li><li>[ ] ol-web1</li></ul></li><li>[ ] <a href="https://openlibrary.org/admin?stats" target="_blank" rel="noreferrer">https://openlibrary.org/admin?stats</a> ol-web1 goes green --&gt; red --&gt; green</li></ul><p>Browse <a href="http://ol-web1.us.archive.org:8080/status" target="_blank" rel="noreferrer">http://ol-web1.us.archive.org:8080/status</a> :</p><ul><li>[ ] Software version [???]</li><li>[ ] Python version 3.8.6</li><li>[ ] Host ol-web1.us.archive.org</li><li>[ ] Browse other pages of the site looking for issues</li></ul><p>Once things look stable and correct...</p><ul><li>[ ] Log out of ol-web1 and into ol-web2</li><li>[ ] Sync the repos</li><li>[ ] Run <code>~/are_servers_in_sync.sh</code> to ensure the repos and Docker latest match all other servers</li><li>[ ] Run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh</code> on ol-web2</li><li>[ ] <a href="https://openlibrary.org/admin?stats" target="_blank" rel="noreferrer">https://openlibrary.org/admin?stats</a> ol-web2 goes green --&gt; red --&gt; green</li></ul><p>Broswe <a href="http://ol-web2.us.archive.org:8080/status" target="_blank" rel="noreferrer">http://ol-web2.us.archive.org:8080/status</a> :</p><ul><li>[ ] Software version [???]</li><li>[ ] Python version 3.8.6</li><li>[ ] Host ol-web2.us.archive.org</li><li>[ ] Browse other pages of the site looking for issues</li></ul><h2 id="_2021-04-08-failed" tabindex="-1">2021-04-08 -- FAILED <a class="header-anchor" href="#_2021-04-08-failed" aria-label="Permalink to &quot;2021-04-08 -- FAILED&quot;">â€‹</a></h2><p>HALT DEPLOYMENT: docker-compose incompatibility discussed in <a href="https://github.com/internetarchive/openlibrary/issues/5007" target="_blank" rel="noreferrer">#5007</a></p><h2 id="_2021-03-24-deployment-image-id-b634610574fc-software-ver-f4f9233" tabindex="-1">2021-03-24 -- Deployment -- IMAGE ID b634610574fc -- Software ver f4f9233 <a class="header-anchor" href="#_2021-03-24-deployment-image-id-b634610574fc-software-ver-f4f9233" aria-label="Permalink to &quot;2021-03-24 -- Deployment -- IMAGE ID b634610574fc -- Software ver f4f9233&quot;">â€‹</a></h2><ul><li>Lot&#39;s of dependency updates after turning on dependabot</li></ul><ul><li>[ ] Follow 2021-03-15 gameplan below</li></ul><hr><p>Open an ssh tunnel; i.e. ssh -L 8080:ol-web1:8080 -qAy <a href="mailto:cclauss@sshgw-sf.us.archive.org" target="_blank" rel="noreferrer">cclauss@sshgw-sf.us.archive.org</a> Then you&#39;ll be able to test at localhost:8080</p><hr><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Make a backup of static assets</span></span>
<span class="line"><span>ssh -A ol-www1 &#39;sudo cp -r /opt/openlibrary/openlibrary/static /opt/openlibrary/openlibrary/static_backup&#39;</span></span>
<span class="line"><span>STATIC_DIR=/tmp/ol-static-$(date &#39;+%Y-%m-%d&#39;)</span></span>
<span class="line"><span>docker cp $(docker create --rm oldev:latest):/openlibrary/static $STATIC_DIR</span></span>
<span class="line"><span>rsync -rvz $STATIC_DIR/ ol-www1:$STATIC_DIR</span></span>
<span class="line"><span># TODO: There&#39;s another static dir!</span></span>
<span class="line"><span>ssh -A ol-www1 &quot;sudo mkdir -p /opt/openlibrary/openlibrary/static-new &amp;&amp; sudo cp -r $STATIC_DIR/* /opt/openlibrary/openlibrary/static-new&quot;</span></span>
<span class="line"><span>ssh -A ol-www1 &#39;sudo chown -R openlibrary:openlibrary /opt/openlibrary/openlibrary/static-new&#39;</span></span>
<span class="line"><span>ssh -A ol-www1 &#39;sudo rm -r /opt/openlibrary/openlibrary/static &amp;&amp; sudo mv /opt/openlibrary/openlibrary/static-new /opt/openlibrary/openlibrary/static&#39;</span></span></code></pre></div><h2 id="_2021-03-15-deployment" tabindex="-1">2021-03-15 -- Deployment <a class="header-anchor" href="#_2021-03-15-deployment" aria-label="Permalink to &quot;2021-03-15 -- Deployment&quot;">â€‹</a></h2><ul><li>[ ] Open a terminal tab and log into ol-home0</li><li>[ ] Open a terminal tab and log into ol-covers0</li><li>[ ] Open a terminal tab and log into ol-web1</li><li>[ ] Open <a href="https://openlibrary.org/admin?stats" target="_blank" rel="noreferrer">https://openlibrary.org/admin?stats</a> so that you can monitor server status</li><li>[ ] <strong>Warn Slack channels <code>openlibrary</code> and <code>openlibrary-g</code> of imminent downtime!</strong></li><li>[ ] On <code>ol-home0</code><ul><li>[ ] cd /opt/openlibrary</li><li>[ ] sudo git checkout master &amp;&amp; sudo git pull</li><li>[ ] sudo make git</li><li>[ ] cd /opt/olsystem</li><li>[ ] sudo git checkout master &amp;&amp; sudo git pull # -- Enter GitHub userid &amp; token</li><li>[ ] cd /opt/booklending_utils</li><li>[ ] sudo git checkout master &amp;&amp; sudo git pull # -- Enter git.archive.org userid &amp; password</li><li>[ ] cd /opt/openlibrary</li></ul></li><li>[ ] Repeat the same steps on <code>ol-covers0</code> and <code>ol-web1</code> # <code>covers</code> does not need booklending_utils</li><li>[ ] Run <code>~/are_servers_in_sync.sh</code> to ensure the three servers are in sync.</li><li>[ ] On <code>ol-home0</code> run <code>/opt/openlibrary/scripts/deployment/deploy.sh</code></li><li>[ ] ~Start an old-style deploy: <code>ssh -A ol-home /olsystem/bin/deploy-code openlibrary</code>~</li><li>[ ] Copy files out Docker image and put them on <code>ol-www1</code></li><li>[ ] Run <code>~/are_servers_in_sync.sh</code> to ensure the three servers have the same Docker latest.</li></ul><p><strong>ADD A PIECE ON ROLLBACK WITH AND WITHOUT VOLUME MOUNTS</strong></p><ul><li><a href="https://docs.docker.com/engine/reference/commandline/tag" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/commandline/tag</a> To do a rollback on <code>ol-home0</code>:</li></ul><ol><li><code>docker image ls</code></li><li>Write down the Docker <code>IMAGE ID</code> that you want to roll back to.</li><li><code>docker tag oldev:&lt;IMAGE ID&gt; oldev:latest</code></li><li>Run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh</code></li><li>Repeat the above steps as required on <code>ol-covers0</code>, <code>ol-web1</code>, <code>ol-web2</code></li></ol><p><strong>EnvVariable $OLDEV_DOCKER_SHA for which Docker image to use oldev:latest vs oldev:SomeSHA</strong></p><p>After deploy.sh finishes successfully,</p><ul><li>[ ] run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh</code> on: <ul><li>[ ] ol-home0</li><li>[ ] ol-covers0</li><li>[ ] ol-web1</li></ul></li><li>[ ] <a href="https://openlibrary.org/admin?stats" target="_blank" rel="noreferrer">https://openlibrary.org/admin?stats</a> ol-web1 goes green --&gt; red --&gt; green</li></ul><p>Browse <a href="http://ol-web1.us.archive.org:8080/status" target="_blank" rel="noreferrer">http://ol-web1.us.archive.org:8080/status</a> :</p><ul><li>[ ] Software version [???]</li><li>[ ] Python version 3.8.6</li><li>[ ] Host ol-web1.us.archive.org</li><li>[ ] Browse other pages of the site looking for issues</li></ul><p>Once things look stable and correct...</p><ul><li>[ ] Log out of ol-web1 and into ol-web2</li><li>[ ] Sync the repos</li><li>[ ] Run <code>~/are_servers_in_sync.sh</code> to ensure the repos and Docker latest match all other servers</li><li>[ ] Run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh</code> on ol-web2</li><li>[ ] <a href="https://openlibrary.org/admin?stats" target="_blank" rel="noreferrer">https://openlibrary.org/admin?stats</a> ol-web2 goes green --&gt; red --&gt; green</li></ul><p>Broswe <a href="http://ol-web2.us.archive.org:8080/status" target="_blank" rel="noreferrer">http://ol-web2.us.archive.org:8080/status</a> :</p><ul><li>[ ] Software version [???]</li><li>[ ] Python version 3.8.6</li><li>[ ] Host ol-web2.us.archive.org</li><li>[ ] Browse other pages of the site looking for issues</li></ul><h2 id="_2021-03-04-deployment" tabindex="-1">2021-03-04 -- Deployment... <a class="header-anchor" href="#_2021-03-04-deployment" aria-label="Permalink to &quot;2021-03-04 -- Deployment...&quot;">â€‹</a></h2><p>Do old-style deploy EARLY</p><p>One cover job failed on an error -- Restarting the server cleaned it up.</p><p>Troubles on ol-home because of</p><ol><li>a lack of diskspace <ul><li>Remove older files from ol-home:/opt/openlibrary/deploys/openlibrary</li></ul></li><li>Problems with one or more PRs in the deployment</li></ol><h2 id="_2021-02-12-deployment" tabindex="-1">2021-02-12 -- Deployment... <a class="header-anchor" href="#_2021-02-12-deployment" aria-label="Permalink to &quot;2021-02-12 -- Deployment...&quot;">â€‹</a></h2><blockquote><p>Check for red flags in nagios</p></blockquote><p>How do I log in???</p><p>Not confident that all repos:</p><ol><li>are set to the master branch</li><li>have no uncommitted changes</li><li><code>git pull</code> works properly</li></ol><p>Created a script in <code>~cclauss/are_repos_in_sync.sh</code> to ensure repos are all using the same SHA on all hosts</p><p>When running deploy you must enter:</p><ol><li>GitLab id and password</li><li>GitHub id and password</li></ol><p>One Docker image download failed so <code>deploy.sh</code> needed to be halted and rerun.</p><p>After deploy.sh finishes successfully, run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh</code> on:</p><ul><li>[ ] ol-home0</li><li>[ ] ol-covers0</li><li>[ ] ol-web1</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Creating openlibrary_covers_2    ... error</span></span>
<span class="line"><span>Creating openlibrary_memcached_1 ... done</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ERROR: for openlibrary_covers_2  Cannot create container for service covers: failed to mkdir /var/lib/docker/volumes/openlibrary_ol-vendor/_data/infogami/infogami: mkdir /var/lib/docker/volumes/openlibrary_ol-vendor/_data/infogami/infogami: file exists</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ERROR: for covers  Cannot create container for service covers: failed to mkdir /var/lib/docker/volumes/openlibrary_ol-vendor/_data/infogami/infogami: mkdir /var/lib/docker/volumes/openlibrary_ol-vendor/_data/infogami/infogami: file exists</span></span>
<span class="line"><span>Encountered errors while bringing up the project.</span></span></code></pre></div><ul><li>[ ] <a href="https://openlibrary.org/admin?stats" target="_blank" rel="noreferrer">https://openlibrary.org/admin?stats</a> ol-web1 goes green --&gt; red --&gt; green</li></ul><p>Broswe <code>ol-web1.us.archive.org:8080/status</code>:</p><ul><li>[x] Software version [c446875]</li><li>[x] Python version 3.8.6</li><li>[x] Host ol-web1.us.archive.org</li><li>[ ] Browse -- No covers <ul><li>Rerun <code>/opt/openlibrary/scripts/deployment/restart_servers.sh</code> on ol-covers0</li><li>Do Old-style deploy</li></ul></li></ul><p>Old-style deploy: <code>ssh -A ol-home /olsystem/bin/deploy-code openlibrary</code></p><p>Once things look stable and correct...</p><ul><li>[ ] Run <code>/opt/openlibrary/scripts/deployment/restart_servers.sh</code> on ol-web2</li><li>[ ] <a href="https://openlibrary.org/admin?stats" target="_blank" rel="noreferrer">https://openlibrary.org/admin?stats</a> ol-web2 goes green --&gt; red --&gt; green</li></ul><p>Broswe <a href="http://ol-web2.us.archive.org:8080/status" target="_blank" rel="noreferrer">http://ol-web2.us.archive.org:8080/status</a> :</p><ul><li>[x] Software version [c446875]</li><li>[x] Python version 3.8.6</li><li>[x] Host ol-web2.us.archive.org</li><li>[x] Browse -- Perfect!</li></ul><p>DONE!</p><h2 id="_2021-02-04-deployment" tabindex="-1">2021-02-04 -- Deployment... <a class="header-anchor" href="#_2021-02-04-deployment" aria-label="Permalink to &quot;2021-02-04 -- Deployment...&quot;">â€‹</a></h2><p>DO NOT sudo bash (or rsync will be unhappy)</p><p>OL-HOME0 cd /opt/openlibrary scripts/deployment/deploy.sh Provide userid/password for git.archive.org Provide userid/token for github.com Q: Why do we get dumped into emacs? (This was sudo bash) 4 minutes to docker-compose build --pull web 32 seconds to docker-compose run -uroot --rm home make i18n REPOSITORY TAG IMAGE ID CREATED SIZE oldev 7dbe17f2a809697acf53766bd89d60443653260d 9c8a9bb06afc 37 seconds ago 2.87GB 4 minutes to gzip 1 minute per server to rsync image plus repos Need to time docker load</p><h2 id="_2021-02-02-process-to-update-the-infogami-submodule" tabindex="-1">2021-02-02 -- Process to update the infogami submodule... <a class="header-anchor" href="#_2021-02-02-process-to-update-the-infogami-submodule" aria-label="Permalink to &quot;2021-02-02 -- Process to update the infogami submodule...&quot;">â€‹</a></h2><p>pwd # openlibrary/vendor/infogami git pull upstream master # Ensure we have the latest infogami git status cd ../.. git status git branch git checkout -b update-infogami git add vendor/infogami git status git commit -m&quot;update infogami&quot; git push --set-upstream origin update-infogami # Create a PR and merge it</p><h2 id="_2021-01-25" tabindex="-1">2021-01-25 <a class="header-anchor" href="#_2021-01-25" aria-label="Permalink to &quot;2021-01-25&quot;">â€‹</a></h2><ul><li>Using scripts/deployment <ul><li>4-minute docker build</li><li>need to time make i18n</li><li>4-minute docker save</li><li>rsyncs fail ðŸ˜¦</li></ul></li></ul><h2 id="_2021-01-21" tabindex="-1">2021-01-21 <a class="header-anchor" href="#_2021-01-21" aria-label="Permalink to &quot;2021-01-21&quot;">â€‹</a></h2><ul><li><code>solr-updater</code><ul><li>Needed <code>/opt/.petabox/dbserver</code>, with perms for openlibrary user +x.</li><li>Something weird had happened on ol-home! the .offset files had disappeared ðŸ˜• Seemed like solr-updater was stuck in a restart loop. Also infobase had been running on it for ~10h. Likely at some point the entire ol-home VM was restarted, causing supervisor to restart all the processes.</li><li>Remove the old processes from /etc/supervisor/conf.d, and ran <code>sudo supervisorctl update</code></li><li>solr-updater is running ol-home0 from 2021-01-21 ; likely missed ~10h of edits or something. No clue how long the break was.</li><li>To check last edit + offset processed by solr-updater on ol-home0: <code>docker-compose exec solr-updater cat &#39;/solr-updater-data/solr-update.offset&#39;</code></li><li>To get the last record/datetime: <code>curl -s &quot;ol-home0:7000/openlibrary.org/log/$(docker-compose exec solr-updater cat &#39;/solr-updater-data/solr-update.offset&#39;)?limit=1&quot;</code></li></ul></li><li><code>import-bot</code><ul><li>It launched ok, but we noticed that on both ol-home and ol-home0 we were getting loads of errors:</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>l: https://openlibrary.org/api/import/ia. Response:</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:06 [178] [openlibrary.importer] [INFO] sleeping for 5 seconds before next attempt.</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:11 [178] [openlibrary.api] [INFO] POST /api/import/ia</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:11 [178] [openlibrary.importer] [WARNING] Failed to contact OL server. error=403 Client Error: Forbidden for url: https://openlibrary.org/api/import/ia. Response:</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:11 [178] [openlibrary.importer] [ERROR] failed with internal error</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:11 [178] [openlibrary.imports] [INFO] set-status professioncallgi0000luca - failed internal-error None</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:11 [178] [openlibrary.importer] [INFO] importing istanbultocairoo0000hump</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:11 [178] [openlibrary.api] [INFO] POST /api/import/ia</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:11 [178] [openlibrary.importer] [WARNING] Failed to contact OL server. error=403 Client Error: Forbidden for url: https://openlibrary.org/api/import/ia. Response:</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:11 [178] [openlibrary.importer] [INFO] sleeping for 5 seconds before next attempt.</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:16 [178] [openlibrary.api] [INFO] POST /api/import/ia</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:17 [178] [openlibrary.importer] [WARNING] Failed to contact OL server. error=403 Client Error: Forbidden for url: https://openlibrary.org/api/import/ia. Response:</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:17 [178] [openlibrary.importer] [INFO] sleeping for 5 seconds before next attempt.</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:22 [178] [openlibrary.api] [INFO] POST /api/import/ia</span></span>
<span class="line"><span>importbot_1         | 2021-01-21 18:43:22 [178] [openlibrary.importer] [WARNING] Failed to contact OL server. error=403 Client Error: Forbidden for url: https://openlibrary.org/api/import/ia. Response:</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Response: None</span></span>
<span class="line"><span>2021-01-21 18:30:31 [2374] [openlibrary.importer] [ERROR] failed with internal error</span></span>
<span class="line"><span>2021-01-21 18:30:31 [2374] [openlibrary.imports] [INFO] set-status practicalapproac0000sime_g7a3 - failed internal-error None</span></span>
<span class="line"><span>0.0 (1): UPDATE import_item SET status = &#39;failed&#39;, error = &#39;internal-error&#39;, import_time = &#39;2021-01-21T18:30:31.230473&#39;, ol_key = NULL WHERE id=2424861</span></span>
<span class="line"><span>2021-01-21 18:30:31 [2374] [openlibrary.importer] [INFO] importing catalogueofmisce00slei_5</span></span>
<span class="line"><span>2021-01-21 18:30:31 [2374] [openlibrary.api] [INFO] POST /api/import/ia</span></span>
<span class="line"><span>/opt/openlibrary/venv/local/lib/python2.7/site-packages/urllib3/util/ssl_.py:139: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</span></span>
<span class="line"><span>  InsecurePlatformWarning,</span></span>
<span class="line"><span>2021-01-21 18:30:31 [2374] [openlibrary.importer] [WARNING] Failed to contact OL server. error=403 Client Error: Forbidden for url: https://openlibrary.org/api/import/ia. Response:</span></span>
<span class="line"><span>2021-01-21 18:30:31 [2374] [openlibrary.importer] [INFO] sleeping for 5 seconds before next attempt.</span></span>
<span class="line"><span>2021-01-21 18:30:36 [2374] [openlibrary.api] [INFO] POST /api/import/ia</span></span>
<span class="line"><span>/opt/openlibrary/venv/local/lib/python2.7/site-packages/urllib3/util/ssl_.py:139: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings</span></span>
<span class="line"><span>  InsecurePlatformWarning,</span></span>
<span class="line"><span>2021-01-21 18:30:36 [2374] [openlibrary.importer] [WARNING] Failed to contact OL server. error=403 Client Error: Forbidden for url: https://openlibrary.org/api/import/ia. Response:</span></span></code></pre></div><h2 id="_2021-01-15-deployment-steps" tabindex="-1">2021-01-15 Deployment steps <a class="header-anchor" href="#_2021-01-15-deployment-steps" aria-label="Permalink to &quot;2021-01-15 Deployment steps&quot;">â€‹</a></h2><p>Use the scripts from <a href="https://github.com/internetarchive/openlibrary/pull/4395" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/pull/4395</a></p><ol><li><strong>ol-home0</strong>: Run <code>scripts/deployment/start_production_deploy.sh</code><ul><li><strong>NOTE:</strong> Login problem with <code>booklending_utils</code> (redo manually)</li></ul></li><li><strong>ol-home0, ol-web1, ol-covers</strong>: Run <code>scripts/deployment/continue_production_deploy.sh</code><ul><li>Run the script only until just before the <code>docker-compose down</code> step.</li><li>Open <code>https://openlibrary.org/admin?stats</code></li><li>Once all three hosts are ready, run commands from <code>docker-compose down</code> to the bottom of the script.</li><li>Check <code>https://openlibrary.org/admin?stats</code> and <code>http://ol-web1.us.archive.org:8080/status</code></li></ul></li><li>Repeat step 2 only on the host <strong>ol-web2</strong></li></ol><p>NOTE: On both <code>ol-web{1, 2}</code>, the command <code>docker-compose run -uroot --rm home make i18n</code> failed with:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ERROR: An HTTP request took too long to complete. Retry with --verbose to obtain debug information.</span></span>
<span class="line"><span>If you encounter this issue regularly because of slow network conditions, consider setting</span></span>
<span class="line"><span>    COMPOSE_HTTP_TIMEOUT to a higher value (current value: 60).</span></span></code></pre></div><p>Manually re-running the command finished in a few seconds with no warnings or errors.</p><p>THINGS WE FORGOT: Old-style install on <code>ol-home</code> -- <code>ssh -A ol-home /olsystem/bin/deploy-code openlibrary</code></p><h2 id="_2021-01-09-deployment-steps" tabindex="-1">2021-01-09 Deployment steps <a class="header-anchor" href="#_2021-01-09-deployment-steps" aria-label="Permalink to &quot;2021-01-09 Deployment steps&quot;">â€‹</a></h2><ol><li><strong>ol-home0</strong>: <code>sudo git pull origin master</code> the four repos</li><li><strong>ol-home0</strong>: build new Docker image</li><li><strong>ol-home0</strong>: docker save the image with both tags <code>:SHA</code> and <code>:latest</code><ul><li>Should we used date-time instead of <code>:SHA</code>?</li></ul></li><li><strong>ol-home0</strong>: rsync the :SHA-tagged image to ol-web{1,2}, ol-covers</li><li><strong>ol-web{1,2}, ol-covers</strong>: docker image prune &amp;&amp; docker load the image with both tags <code>:SHA</code> and <code>:latest</code></li><li><strong>ol-home0</strong>: rsync the four repos to ol-web{1,2}, ol-covers</li><li><strong>all hosts</strong>: docker-compose up the appropriate docker services for that host</li></ol><hr><p>When <code>start_production_deploy.sh</code> is run on <code>ol-home0</code> it should achieve steps 1. thru 4. above.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># https://github.com/internetarchive/openlibrary/wiki/Deployment-Scratchpad</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># This script must be run on ol-home0 to start a new deployment.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[ \${HOSTNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOST} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ol-home0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ]]; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FATAL: Must only be run on ol-home0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    exit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># \`sudo git pull origin master\` the core Open Library repos:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. https://github.com/internetarchive/olsystem</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. https://git.archive.org/jake/booklending_utils</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. https://github.com/internetarchive/openlibrary</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4. https://github.com/internetarchive/infogami</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REPO_DIRS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/opt/olsystem /opt/booklending_utils /opt/openlibrary /opt/openlibrary/vendor/infogami&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> REPO_DIR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $REPO_DIRS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $REPO_DIR</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># These commands were run once and probably do not need to be repeated</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chown</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root:staff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g+w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g+s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build the oldev Docker production image</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/openlibrary</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPOSE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docker-compose.yml:docker-compose.production.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Add a timestamp tag to the Docker image to facilitate rapid rollback</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FROM oldev:latest&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oldev:$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +%Y-%m-%d_%H-%M)&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Compress the image in a .tar.gz file for transfer to other hosts</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oldev:latest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gzip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oldev_latest.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Transfer the .tar.gz image to other hosts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REMOTE_HOSTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ol-covers0 ol-web1 ol-web2&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> REMOTE_HOST </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $REMOTE_HOSTS</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Starting rsync of oldev_latest.tar.gz to </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$REMOTE_HOST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rsync</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-owner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --group</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --verbose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oldev_latest.tar.gz</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$REMOTE_HOST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:/opt/olimages/&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Finished rsync of oldev_latest.tar.gz to </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$REMOTE_HOST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">...&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">done</span></span></code></pre></div><h2 id="_2021-01-07-deploy" tabindex="-1">2021-01-07 Deploy <a class="header-anchor" href="#_2021-01-07-deploy" aria-label="Permalink to &quot;2021-01-07 Deploy&quot;">â€‹</a></h2><p>THINGS WE FORGOT:</p><ol><li>To down/up infobase:</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPOSE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docker-compose.yml:docker-compose.production.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary_ol-vendor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary_ol-build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary_ol-nodemodules</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HOSTNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOSTNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-deps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> infobase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> infobase_nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> affiliate-server</span></span></code></pre></div><ol start="2"><li>To check for new errors on Sentry ðŸ˜…</li></ol><hr><ol><li>[ ] @mek Modify fabfile to rsync ol code repos to the new servers in their expected directories</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ol-home:/deploy/latest/opt/openlibrary</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ol-web1:/opt/openlibrary</span></span></code></pre></div><ol start="2"><li>[ ] @mek Run old-style deploy from ol-home</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ol-home</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/olsystem/bin/deploy-code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary</span></span></code></pre></div><ol start="2"><li>[ ] @mek Checkout infogami 7595ae7 on ol-home</li></ol><hr><ol start="3"><li>[x] @cclauss ol-home0 pull latest code of all repo</li><li>[x] @cclauss ol-home0 build the image *1</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPOSE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docker-compose.yml:docker-compose.production.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span></span></code></pre></div><ol start="4"><li>[x] @cclauss Create /opt/olimages for everything <ul><li>[x] ol-web1</li><li>[x] ol-web2</li><li>[x] ol-covers0</li><li>[x] @cdrini ol-home0</li></ul></li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chown</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root:staff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g+w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g+s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span></code></pre></div><ol start="5"><li>[x] @cdrini Docker save image</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/openlibrary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prune</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Not necessary; but cleanup</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FROM oldev:latest&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oldev:$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rev-parse HEAD)&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> docker save oldev:latest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gzip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oldev_latest.tar.gz</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ~3 min, final file 820 MB ; image in docker container ls was 2.6 GB</span></span></code></pre></div><ol start="6"><li>[x] ~Modify fabfile to~ rsync docker image to all the hosts</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olimages</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># each takes ~18s</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rsync -a --no-owner --group --verbose oldev_latest.tar.gz </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ol-web1:/opt/olimages/&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rsync -a --no-owner --group --verbose oldev_latest.tar.gz </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ol-web2:/opt/olimages/&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rsync -a --no-owner --group --verbose oldev_latest.tar.gz </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ol-covers0:/opt/olimages/&quot;</span></span></code></pre></div><ol start="6"><li>[x] Do old style deploy using mek&#39;s code so that it doesn&#39;t try to rsync to ol-web{1,2} ol-covers0 ol-home0 *4 <ul><li>Put mek&#39;s fabfile.py changes into <code>fab_file_changes.diff</code></li></ul></li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ol-home</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/olsystem/bin/deploy-code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary</span></span></code></pre></div><ol start="6"><li>[x web1, x web2, x covers0] @cclauss git pull latest code</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olsystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/booklending_utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/openlibrary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/openlibrary/vendor/infogami</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/openlibrary</span></span></code></pre></div><ol start="7"><li>[x web1, x web2, x covers0] docker load on all hosts *3 <ul><li>The new docker image should have label &quot;SHA&quot; as well as &quot;latest&quot;</li></ul></li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ~2min</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> docker image prune</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ~4min</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> docker load </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /opt/olimages/oldev_latest.tar.gz</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/openlibrary</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FROM oldev:latest&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;oldev:$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rev-parse HEAD)&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span></span></code></pre></div><h3 id="for-node-in-ol-web-1-2-ol-covers0" tabindex="-1">for node in ol-web{1,2} ol-covers0 <a class="header-anchor" href="#for-node-in-ol-web-1-2-ol-covers0" aria-label="Permalink to &quot;for node in ol-web{1,2} ol-covers0&quot;">â€‹</a></h3><ol start="7"><li>[x] Down / up</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPOSE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docker-compose.yml:docker-compose.production.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># WARNING! Moment of downtime ðŸ˜¬ </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary_ol-vendor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary_ol-build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary_ol-nodemodules</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HOSTNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOSTNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --scale</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> covers=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> covers_nginx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memcached</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPOSE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docker-compose.yml:docker-compose.production.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Remove these because they contain stale copies of the build/vendor/nodemodules files.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Want to use the files inside the docker image since it&#39;s freshly built.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># NOTE: longer term, we likely don&#39;t want these volume mounted for production</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary_ol-vendor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary_ol-build</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openlibrary_ol-nodemodules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HOSTNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOSTNAME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-deps</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span></span></code></pre></div><h3 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">â€‹</a></h3><ol><li>Hit a docker error: <code>ERROR: Couldn&#39;t connect to docker daemon</code> . Was not in docker group</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Make sure you&#39;re in the docker group, to avoid sudo-ing all the docker commands</span></span>
<span class="line"><span>sudo usermod -aG docker USER_NAME</span></span>
<span class="line"><span># Exit/re-enter to take effect</span></span></code></pre></div><ol start="2"><li><p>We might want a date-based instead of SHA-based image label, so that this is more human-readable (maybe <code>date +%Y-%m-%dT%H%M</code>)</p></li><li><p>It looks like <code>docker load</code> reloads all the layers!</p></li></ol><p>Here is <code>docker image ls</code> before:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>drini@ol-web1:/opt/olimages$ docker image ls</span></span>
<span class="line"><span>REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span></span>
<span class="line"><span>oldev                latest              24e7730de44e        3 weeks ago         2.55GB</span></span>
<span class="line"><span>openlibrary/olbase   latest              7107cde0123e        4 weeks ago         2.43GB</span></span>
<span class="line"><span>openlibrary/olbase   &lt;none&gt;              e7ad65c36ade        5 weeks ago         2.45GB</span></span>
<span class="line"><span>openlibrary/olbase   &lt;none&gt;              5bc304b7af6a        6 weeks ago         2.46GB</span></span>
<span class="line"><span>openlibrary/olbase   &lt;none&gt;              8b9ba7350023        8 weeks ago         2.46GB</span></span>
<span class="line"><span>openlibrary/olbase   &lt;none&gt;              089f94fd1626        8 weeks ago         2.45GB</span></span></code></pre></div><p>It notes:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>The image oldev:latest already exists, renaming the old one with ID sha256:24e7730de44e45356224fd9ec0f58eb39ef104f5e38b28227ff100ed67a1d0f6 to empty string</span></span>
<span class="line"><span>Loaded image: oldev:latest</span></span></code></pre></div><p>After:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>drini@ol-web1:/opt/olimages$ docker image ls</span></span>
<span class="line"><span>REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span></span>
<span class="line"><span>oldev                latest              8b1a1ec051bf        About an hour ago   2.58GB</span></span>
<span class="line"><span>&lt;none&gt;               &lt;none&gt;              24e7730de44e        3 weeks ago         2.55GB</span></span>
<span class="line"><span>openlibrary/olbase   latest              7107cde0123e        4 weeks ago         2.43GB</span></span>
<span class="line"><span>openlibrary/olbase   &lt;none&gt;              e7ad65c36ade        5 weeks ago         2.45GB</span></span>
<span class="line"><span>openlibrary/olbase   &lt;none&gt;              5bc304b7af6a        6 weeks ago         2.46GB</span></span>
<span class="line"><span>openlibrary/olbase   &lt;none&gt;              8b9ba7350023        8 weeks ago         2.46GB</span></span>
<span class="line"><span>openlibrary/olbase   &lt;none&gt;              089f94fd1626        8 weeks ago         2.45GB</span></span></code></pre></div><ol start="4"><li>TODO for @cdrini: Remove all refs to ol-solr2 in olsystem</li></ol><h2 id="_2020-12-10-deploy" tabindex="-1">2020-12-10 Deploy <a class="header-anchor" href="#_2020-12-10-deploy" aria-label="Permalink to &quot;2020-12-10 Deploy&quot;">â€‹</a></h2><p>THINGS I FORGOT TO DO:</p><ul><li><code>docker-compose run -uroot --rm home make i18n</code> (Added after-the-fact)</li></ul><ol><li>[x] On web{1,2} chown /booklending_utils</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chown</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 999:staff</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/booklending_utils</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g+w</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -R</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/booklending_utils</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> find</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/booklending_utils</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g+s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\;</span></span></code></pre></div><ol start="2"><li>[x] Do a classic deploy so that ol-www1 has up-to-date static files <ul><li>[x] Confirm web{3,4} not restarted</li></ul></li></ol><h3 id="for-node-in-web-1-2" tabindex="-1">for node in web{1,2}: <a class="header-anchor" href="#for-node-in-web-1-2" aria-label="Permalink to &quot;for node in web{1,2}:&quot;">â€‹</a></h3><ol><li>[x, x] Down (down first so code in memory that&#39;s currently running is not out-of-sync with what&#39;s on the filesystem)</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPOSE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docker-compose.yml:docker-compose.production.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> down</span></span></code></pre></div><ol start="2"><li>[x, x] Checkout</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/olsystem</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/openlibrary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/openlibrary/vendor/infogami</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/booklending_utils</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><ol start="3"><li>[x, x] Build</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPOSE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docker-compose.yml:docker-compose.production.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -uroot</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span></span></code></pre></div><ol start="4"><li>[x, x] Restart</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMPOSE_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;docker-compose.yml:docker-compose.production.yml&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HOSTNAME</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$HOSTNAME PYENV_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3.8.6</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker-compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-deps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span></span></code></pre></div><p>Sort of issue? On web2, got a weird issue; <code>git pull origin master</code> was not pulling that latest infogami. We think this is because of some odd funny business with .git and /openlibrary (which contains .git) being mounted.</p><ul><li><strong>Seems like I forgot the COMPOSE_FILE</strong></li></ul><hr><p>Note: need to build to JS and everything else as well!</p><p>What is the status of <a href="https://github.com/internetarchive/openlibrary/issues/2032" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/issues/2032</a> ?</p><p>Option:</p><ol><li>Merge your olsystem PR, and test running the old deploy code (should do checkout on all the nodes)</li></ol><blockquote><blockquote><ol start="2"><li>Manually do it</li></ol></blockquote></blockquote><p>Option:</p><ol><li>Try to docker save/load, and only build on ol-home <ul><li>If we didn&#39;t mount /openlibrary...</li></ul></li></ol><blockquote><blockquote><ol start="2"><li>Do it manually</li></ol></blockquote></blockquote><p>ol-www1 is what serves static files, so we need a way to build the js/css/components (inside docker), and then copy the files over to ol-www1</p><p>Creates a tar: docker save oldev:latest</p><p>??? Get to the other servers</p><p>docker load oldev.tar oldev:14f docker tag oldev:14f latest</p>`,169)]))}const g=i(l,[["render",t]]);export{c as __pageData,g as default};
