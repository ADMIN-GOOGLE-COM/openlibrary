import{_ as o,c as t,o as a,ag as r}from"./chunks/framework.BRQrZDXk.js";const m=JSON.parse('{"title":"Manually Running Dumps","description":"","frontmatter":{},"headers":[],"relativePath":"6_Advanced/Generating-Data-Dumps.md","filePath":"6_Advanced/Generating-Data-Dumps.md"}'),i={name:"6_Advanced/Generating-Data-Dumps.md"};function n(l,e,s,d,p,c){return a(),t("div",null,e[0]||(e[0]=[r(`<h1 id="manually-running-dumps" tabindex="-1">Manually Running Dumps <a class="header-anchor" href="#manually-running-dumps" aria-label="Permalink to &quot;Manually Running Dumps&quot;">​</a></h1><p>Data dumps are introduced at <a href="https://openlibrary.org/developers/dumps" target="_blank" rel="noreferrer">https://openlibrary.org/developers/dumps</a></p><p>Successful data dumps are transferred to <a href="https://archive.org/details/ol_exports?sort=-publicdate" target="_blank" rel="noreferrer">https://archive.org/details/ol_exports?sort=-publicdate</a></p><p>Data dumps should be created on <code>ol-home0</code> within the <code>openlibrary-cron-jobs-1</code> Docker container.</p><ul><li><code>docker-compose.production.yml</code> defines <code>cron-jobs</code> Docker container.</li><li>That container uses <code>docker/ol-cron-start.sh</code> to submit the cron jobs.</li><li>The jobs are defined in <code>olsystem/etc/cron.d/openlibrary.ol_home0</code>.</li></ul><p>Data dumps (e.g. ol_dump.txt.gz) may be manually regenerated on <code>ol-home0</code> within the <code>openlibrary-cron-jobs-1</code> Docker container:</p><h1 id="run-an-out-of-cycle-open-library-data-dump-aug-2022" tabindex="-1">Run an out-of-cycle Open Library Data Dump (Aug. 2022) <a class="header-anchor" href="#run-an-out-of-cycle-open-library-data-dump-aug-2022" aria-label="Permalink to &quot;Run an out-of-cycle Open Library Data Dump (Aug. 2022)&quot;">​</a></h1><ol><li>Log into the host <code>ol-home0</code></li><li><code>tmux</code> # The data dumps are a long-running process and <code>tmux</code> enables reconnecting to a host that has been disconnected.</li><li><code>cd /opt/openlibrary</code></li><li><code>docker ps</code> # To ensure that <code>openlibrary-cron-jobs-1</code> is up and running</li><li><code>docker exec -it -uroot openlibrary-cron-jobs-1 bash</code></li><li><code>crontab -l | less</code> # to see the ol data dumps command</li><li><code>ls /1/var/tmp/dumps</code> # to see if there are data files that should be deleted <ol><li>We kept the raw database dump <code>data.txt.gz</code></li><li>We <code>rm -r oldumpsort</code> because we wanted to rebuild that</li><li>We replaced the date logic with a date string</li><li>We removed <code>—overwrite</code> to skip some early steps like extracting <code>data.txt.gz</code> from postgres</li></ol></li><li><code>cd /opt/openlibrary</code> # just to be sure</li><li><code>PSQL_PARAMS=‘-h ol-db1 openlibrary’ TMPDIR=‘/1/var/tmp’ OL_CONFIG=‘/olsystem/etc/openlibrary.yml’ su openlibrary -c “/openlibrary/scripts/oldump.sh 2022-07-31 —archive”</code></li><li>Debug with <code>top</code> and also with <code>zcat /1/var/tmp/dumps_2022-07-31.txt.gz | head | less</code></li></ol><h1 id="examine-the-dump-process-logs" tabindex="-1">Examine the dump process logs <a class="header-anchor" href="#examine-the-dump-process-logs" aria-label="Permalink to &quot;Examine the dump process logs&quot;">​</a></h1><ol><li>Log into the host <code>ol-home0</code></li><li><code>docker logs openlibrary-cron-jobs-1 2&gt;&amp;1 | grep openlibrary.dump | less</code><ul><li>Or to follow the logs during the process: <code>docker logs openlibrary-cron-jobs-1 --follow</code></li></ul></li></ol><h1 id="related-issues" tabindex="-1">Related Issues <a class="header-anchor" href="#related-issues" aria-label="Permalink to &quot;Related Issues&quot;">​</a></h1><p><a href="https://github.com/internetarchive/openlibrary/issues/5402" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/issues/5402</a> - cron is presently broken <a href="https://github.com/internetarchive/openlibrary/issues/5719" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/issues/5719</a> - fix for October 2021-10</p><h1 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-label="Permalink to &quot;History&quot;">​</a></h1><p>See original by @gdamdam at: <a href="http://gio.blog.archive.org/2015/03/11/ol-how-to-generate-the-dump-files/" target="_blank" rel="noreferrer">http://gio.blog.archive.org/2015/03/11/ol-how-to-generate-the-dump-files/</a></p><h1 id="how-it-works" tabindex="-1">How it Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it Works&quot;">​</a></h1><h2 id="dumping-the-db" tabindex="-1">Dumping the DB <a class="header-anchor" href="#dumping-the-db" aria-label="Permalink to &quot;Dumping the DB&quot;">​</a></h2><p>First step is dumping the data table from <code>ol-db1</code> -- this task requires around 1 hour to complete.</p><pre><code>you@ol-home:/1/var/tmp$ psql -h ol-db1 -U openlibrary openlibrary -c &quot;copy data to stdout&quot; | gzip -c &gt; data.txt.gz
</code></pre><h2 id="generate-metadata-table-dump-from-archive-db" tabindex="-1">Generate Metadata table dump from archive db <a class="header-anchor" href="#generate-metadata-table-dump-from-archive-db" aria-label="Permalink to &quot;Generate Metadata table dump from archive db&quot;">​</a></h2><p>This task will also require ~1 hour to complete. Change the filename dates accordingly:</p><pre><code>you@ol-home:/1/var/tmp$ source /opt/openlibrary/venv/bin/activate # Activate virtual environment
(venv)you@ol-home:/1/var/tmp$ ARCHIVE_DB_PASSWORD=\`/opt/.petabox/dbserver\`
(venv)you@ol-home:/1/var/tmp$ python /opt/openlibrary/openlibrary/scripts/2012/dump-ia-items.py --host db-current --user archive --password $ARCHIVE_DB_PASSWORD --database archive | gzip -c &gt; ia_metadata_dump_2015-03-11.txt.gz
</code></pre><h2 id="generate-revision-dump" tabindex="-1">Generate Revision Dump <a class="header-anchor" href="#generate-revision-dump" aria-label="Permalink to &quot;Generate Revision Dump&quot;">​</a></h2><p>This will create a dump of all revisions of all documents and takes around 8 hours to complete:</p><pre><code>you@ol-home:/1/var/tmp$ source /opt/openlibrary/venv/bin/activate # Activate virtual environment
(venv)you@ol-home:/1/var/tmp$ /opt/openlibrary/openlibrary/scripts/oldump.py cdump data.txt.gz 2015-03-11 | gzip -c &gt; ol_cdump.txt.gz
(venv)you@ol-home:/1/var/tmp$ rm data.txt.gz
</code></pre><h2 id="generate-latest-revision-dump" tabindex="-1">Generate Latest Revision Dump <a class="header-anchor" href="#generate-latest-revision-dump" aria-label="Permalink to &quot;Generate Latest Revision Dump&quot;">​</a></h2><p>Generate the dump of latest revisions of all documents. This task requires around 6 hours to complete.</p><pre><code>you@ol-home:/1/var/tmp$ source /opt/openlibrary/venv/bin/activate # Activate virtual environment
(venv)you@ol-home:/1/var/tmp$ gzip -cd ol_cdump.txt.gz | python /opt/openlibrary/openlibrary/scripts/oldump.py sort --tmpdir /1/var/tmp | python /opt/openlibrary/openlibrary/scripts/oldump.py dump | gzip -c &gt; ol_dump_2015-03-11.txt.gz
(venv)you@ol-home:/1/var/tmp$ rm -rf /1/var/tmp/oldumpsort
</code></pre><h2 id="splitting-dumps" tabindex="-1">Splitting Dumps <a class="header-anchor" href="#splitting-dumps" aria-label="Permalink to &quot;Splitting Dumps&quot;">​</a></h2><p>Splitting the Dump into authors, editions, works, redirects:</p><pre><code>you@ol-home:/1/var/tmp$ source /opt/openlibrary/venv/bin/activate # Activate virtual environment
(venv)giovanni@ol-home:/1/var/tmp$ gzip -cd ol_dump_2015-03-11.txt.gz | python /opt/openlibrary/openlibrary/scripts/oldump.py split --format ol_dump_%s_2015-03-11.txt.gz
</code></pre><h2 id="generating-denormalized-works-dump" tabindex="-1">Generating Denormalized Works Dump <a class="header-anchor" href="#generating-denormalized-works-dump" aria-label="Permalink to &quot;Generating Denormalized Works Dump&quot;">​</a></h2><p>XXX: This script returns exceptions! Each denormalized Work dump record/row is a JSON document with the following fields:</p><ul><li>work – The work documents</li><li>editions – List of editions that belong to this work</li><li>authors – All the authors of this work</li><li>ia – IA metadata for all the ia items referenced in the editions as a list</li><li>duplicates – dictionary of duplicates (key -&gt; it’s duplicates) of work and edition docs mentioned above</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    you@ol-home:/1/var/tmp$ source /opt/openlibrary/venv/bin/activate # Activate virtual environment</span></span>
<span class="line"><span>    (venv)you@ol-home:/1/var/tmp$ python /opt/openlibrary/openlibrary/scripts/2011/09/generate_deworks.py ol_dump_2015-03-11.txt.gz ia_metadata_dump_2015-03-11.txt.gz | gzip -c &gt; ol_dump_deworks_2015-01-11.txt.gz</span></span></code></pre></div><h2 id="verify-dumps" tabindex="-1">Verify Dumps <a class="header-anchor" href="#verify-dumps" aria-label="Permalink to &quot;Verify Dumps&quot;">​</a></h2><pre><code>you@ol-home:/1/var/tmp$ source /opt/openlibrary/venv/bin/activate # Activate virtual environment
(venv)you@ol-home:/1/var/tmp$ ls -lh

ia_metadata_dump_2015-03-11.txt.gz  ol_dump_2015-03-11.txt.gz
ol_dump_redirects_2015-03-11.txt.gz ol_dump_authors_2015-03-11.txt.gz
ol_dump_deworks_2015-01-11.txt.gz   ol_dump_editions_2015-03-11.txt.gz
ol_dump_works_2015-03-11.txt.gz
</code></pre>`,36)]))}const h=o(i,[["render",n]]);export{m as __pageData,h as default};
