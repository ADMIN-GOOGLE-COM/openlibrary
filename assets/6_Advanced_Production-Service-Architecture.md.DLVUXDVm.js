import{_ as t,c as r,o,ag as a}from"./chunks/framework.BRQrZDXk.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"6_Advanced/Production-Service-Architecture.md","filePath":"6_Advanced/Production-Service-Architecture.md"}'),n={name:"6_Advanced/Production-Service-Architecture.md"};function i(l,e,d,s,c,p){return o(),r("div",null,e[0]||(e[0]=[a(`<h2 id="updates" tabindex="-1">UPDATES <a class="header-anchor" href="#updates" aria-label="Permalink to &quot;UPDATES&quot;">​</a></h2><ul><li>2019: <code>ol-mem[0-2]</code> trusty VMs have been reprovisioned as <code>ol-mem[3-5]</code> following the <a href="https://github.com/internetarchive/openlibrary/wiki/Provisioning-Guide" target="_blank" rel="noreferrer">Provisioning Guide</a></li><li>Dec. 2020: Migration to Docker-based deployments based on docker compose</li><li>Jan. 2021: Upgrade to Infogami master and drop <code>docker-compose.infogami-local.yml</code></li><li>Oct./Nov. 2021: Decomission ol-mem{3,4,5} on Ubuntu Xenial in favor of ol-mem{0,1,2} on Ubuntu Focal</li></ul><h2 id="server-types" tabindex="-1">Server Types <a class="header-anchor" href="#server-types" aria-label="Permalink to &quot;Server Types&quot;">​</a></h2><p>@cclauss, please update this section w/ instructions + commands on how to provision each of the following. We likely need to take into consideration <code>ferm</code>, <code>docker</code> install, services like haproxy + nginx + memcache, hb.conf (ips allow list for ol-db), &amp; importantly olsystem updates, updating dns.</p><ul><li>ol-mem</li><li>ol-web</li><li>ol-solr</li><li>ol-covers</li><li>ol-home</li><li>ol-www</li><li>ol-dev</li><li>ol-db</li></ul><p>For ol-web, ol-home, ol-www, and ol-solr, we run something roughly equivalent to this <a href="https://github.com/internetarchive/openlibrary/pull/3938/files#diff-3b30bef8970e22874431ef6aa3d67073bddc40ba78dc7e5a6c86e549a15b5706" target="_blank" rel="noreferrer">setup</a> script</p><h2 id="current-production-architecture" tabindex="-1">Current Production Architecture <a class="header-anchor" href="#current-production-architecture" aria-label="Permalink to &quot;Current Production Architecture&quot;">​</a></h2><p>Today, our production service architecture consists of the following hosts and Docker containers<a href="https://github.com/internetarchive/olsystem/wiki/Open-Library-hosts" target="_blank" rel="noreferrer">:</a></p><table tabindex="0"><thead><tr><th>hostname</th><th>Docker image</th><th>long name</th><th>notes</th></tr></thead><tbody><tr><td>ol-backup0</td><td>None</td><td>bare-metal</td><td><strong>Trusty</strong></td></tr><tr><td>ol-covers0</td><td>covers</td><td>openlibrary-covers-1 &amp; 2</td><td></td></tr><tr><td>ol-covers0</td><td><strong>covers_nginx</strong></td><td>openlibrary-covers_nginx-1</td><td>underscore</td></tr><tr><td>ol-db1 &amp; 2</td><td>None</td><td>postgres on bare-metal -- no Docker</td><td><strong>Trusty</strong></td></tr><tr><td>ol-home0</td><td>affiliate-server</td><td>openlibrary-affiliate-server-1</td><td></td></tr><tr><td>ol-home0</td><td>cron-jobs</td><td>openlibrary-cron-jobs-1</td><td></td></tr><tr><td>ol-home0</td><td>importbot</td><td>openlibrary-importbot-1</td><td></td></tr><tr><td>ol-home0</td><td>infobase</td><td>openlibrary-infobase-1</td><td></td></tr><tr><td>ol-home0</td><td>infobase_nginx</td><td>openlibrary-infobase_nginx-1</td><td>underscore</td></tr><tr><td>ol-home0</td><td>solr-next-updater</td><td>openlibrary-solr-next-updater-1</td><td></td></tr><tr><td>ol-home0</td><td>solr-updater</td><td>openlibrary-solr-updater-1</td><td></td></tr><tr><td>ol-mem0, 1, 2</td><td>None</td><td>memcached on bare metal -- no Docker</td><td></td></tr><tr><td>ol-solr0 &amp; 1</td><td>solr</td><td>openlibrary_solr_1</td><td>underscore</td></tr><tr><td>ol-solr0 &amp; 1</td><td>solr_haproxy</td><td>openlibrary_solr_haproxy_1</td><td>underscore</td></tr><tr><td>ol-solr0 &amp; 1</td><td>solr_restarter</td><td>openlibrary_solr_restarter_1</td><td>underscore</td></tr><tr><td>ol-web1 &amp; 2</td><td>web</td><td>openlibrary-web-1</td><td></td></tr><tr><td>ol-www0</td><td>web_haproxy</td><td>openlibrary-web_haproxy-1</td><td>underscore</td></tr><tr><td>ol-www0</td><td><strong>web_nginx</strong></td><td>openlibrary-web_nginx-1</td><td>underscore</td></tr></tbody></table><h3 id="docker-hostnames" tabindex="-1">Docker hostnames <a class="header-anchor" href="#docker-hostnames" aria-label="Permalink to &quot;Docker hostnames&quot;">​</a></h3><table tabindex="0"><thead><tr><th>hardware hostname</th><th>container name</th><th>docker hostname</th></tr></thead><tbody><tr><td>ol-covers0</td><td>openlibrary-covers-1</td><td>docker-ol-covers0-covers-1</td></tr><tr><td>ol-covers0</td><td>openlibrary-covers-2</td><td>docker-ol-covers0-covers-2</td></tr><tr><td>ol-covers0</td><td>openlibrary-covers_nginx-1</td><td>docker-ol-covers0-covers_nginx-1</td></tr><tr><td>ol-home0</td><td>openlibrary-affiliate-server-1</td><td>docker-ol-home0-</td></tr><tr><td>ol-home0</td><td>openlibrary-cron-jobs-1</td><td>docker-ol-home0-cron-jobs-1</td></tr><tr><td>ol-home0</td><td>openlibrary-importbot-1</td><td>docker-ol-home0-importbot-1</td></tr><tr><td>ol-home0</td><td>openlibrary-infobase-1</td><td>docker-ol-home0-infobase-1</td></tr><tr><td>ol-home0</td><td>openlibrary-infobase_nginx-1</td><td>docker-ol-home0-infobase_nginx-1</td></tr><tr><td>ol-home0</td><td>openlibrary-solr-next-updater-1</td><td>docker-ol-home0-solr-next-updater-1</td></tr><tr><td>ol-home0</td><td>openlibrary-solr-updater-1</td><td>docker-ol-home0-solr-updater-1</td></tr><tr><td>ol-solr0</td><td>openlibrary_solr_1</td><td>docker-ol-solr0-solr_1</td></tr><tr><td>ol-solr0</td><td>openlibrary_solr_haproxy_1</td><td>docker-ol-solr0-solr_haproxy_1</td></tr><tr><td>ol-solr0</td><td>openlibrary_solr_restarter_1</td><td>docker-ol-solr0-solr_restarter_1</td></tr><tr><td>ol-solr1</td><td>jenkins</td><td>docker-ol-solr1-jenkins</td></tr><tr><td>ol-solr1</td><td>openlibrary_solr_haproxy_1</td><td>docker-ol-solr1-solr_haproxy_1</td></tr><tr><td>ol-solr1</td><td>solr_builder-solr_prod-1</td><td>docker-ol-solr1-solr_prod-1</td></tr><tr><td>ol-web1</td><td>openlibrary-web-1</td><td>docker-ol-web1-web-1</td></tr><tr><td>ol-web2</td><td>openlibrary-web-2</td><td>docker-ol-web2-web-1</td></tr><tr><td>ol-www0</td><td>openlibrary-web_haproxy-1</td><td>docker-ol-www0--web_haproxy-1</td></tr><tr><td>ol-www0</td><td>openlibrary-web_nginx-1</td><td>docker-ol-www0--web_nginx-1</td></tr></tbody></table><p><img src="https://archive.org/download/openlibrary-documentation/openlibrary-production-architecture.png" alt="Open Library Production Architecture"></p><h2 id="current-provisioning-setup" tabindex="-1">Current Provisioning Setup <a class="header-anchor" href="#current-provisioning-setup" aria-label="Permalink to &quot;Current Provisioning Setup&quot;">​</a></h2><p>Our current production setup process (as of 2021) for provisioning these Docker containers is <strong>manual</strong> and relies on a lot of manually rsync-ing images around, as well as a separate repository called <code>olsystem</code> which contains the production configs, cron jobs, and infrastructure required to run the official openlibrary.org service.</p><p>Our Docker containers are more-or-less provisioned identically:</p><ul><li>The <code>compose*.yaml</code> files at openlibrary&#39;s root directory contains the Docker configuration data for each container</li><li>These containers may mount external volumes such as <code>olsystem</code>, <code>petabox</code>, and <code>1</code> to access config and shared data.</li><li><code>/opt/openlibrary</code> contains the business logic for the Open Library project:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/opt/</span></span>
<span class="line"><span>/opt/petabox</span></span>
<span class="line"><span>/opt/openlibrary</span></span>
<span class="line"><span>/opt/openlibrary/venv  -- python virtualenv</span></span>
<span class="line"><span>/opt/openlibrary/maxmind-geoip/  -- .dat file for anonymizing IPs</span></span>
<span class="line"><span>/opt/openlibrary/deploys  -- history of all deploys, hash-binned by service</span></span>
<span class="line"><span>/opt/openlibrary/deploys/openlibrary  -- history of openlibrary deploys</span></span>
<span class="line"><span>/opt/openlibrary/deploys/olsystem  -- history of openlibrary deploys</span></span>
<span class="line"><span>/opt/openlibrary/deploys/base  -- deprecated??</span></span>
<span class="line"><span>/opt/openlibrary/deploys/openlibrary/openlibrary  -- active openlibrary deploy</span></span>
<span class="line"><span>/opt/openlibrary/deploys/openlibrary/openlibrary  -- active olsystem deploy</span></span>
<span class="line"><span>/opt/openlibrary/olsystem/  -- symlink to active olsystem: /opt/deploys/openlibrary/olsystem</span></span>
<span class="line"><span>/opt/openlibrary/openlibrary -- symlink to active openlibrary: /opt/deploys/openlibrary/olsystem</span></span></code></pre></div><p>At a minimum, re-provisioning a container requires:</p><ul><li>setting up firewall rules and installing core packages (e.g. git, docker) by running an ansible playbook</li><li>rsync-ing over the legacy VM&#39;s <code>/opt</code> directory (preferably as an external mountable <code>/1</code> volume which can be moved in the future)</li><li>Setting up <code>olsystem</code> so that its files within <code>/opt/openlibrary/olsystem/etc</code> symlink to the right locations within <code>/etc</code></li></ul><h2 id="replace-a-memcache-server-nov-2021" tabindex="-1">Replace a memcache server (Nov. 2021) <a class="header-anchor" href="#replace-a-memcache-server-nov-2021" aria-label="Permalink to &quot;Replace a memcache server (Nov. 2021)&quot;">​</a></h2><p>When provisioning a new memcached server, remember to update/edit <code>/etc/memcached.conf</code> to increase the <code>-m</code> setting to use whatever resources are available on the machine (less perhaps 300mb for OS level memory needs -- e.g. perhaps if the machine has 9.7GB, use -m 9300 or a bit higher). By default memcached only uses 64mb.</p><ul><li>[x] ~ol-mem5~ --&gt; ol-mem0 in <a href="https://github.com/internetarchive/olsystem/pull/138" target="_blank" rel="noreferrer">internetarchive/olsystem#138</a></li><li>[x] ~ol-mem4~ --&gt; ol-mem1 in <a href="https://github.com/internetarchive/olsystem/pull/144" target="_blank" rel="noreferrer">internetarchive/olsystem#144</a> (06 Dec 2021)</li><li>[x] ~ol-mem3~ --&gt; ol-mem2 in <a href="https://github.com/internetarchive/olsystem/pull/145" target="_blank" rel="noreferrer">internetarchive/olsystem#145</a> (?? Dec 2021)</li></ul><h2 id="performing-upgrades" tabindex="-1">Performing Upgrades <a class="header-anchor" href="#performing-upgrades" aria-label="Permalink to &quot;Performing Upgrades&quot;">​</a></h2><p>This is in response to <a href="https://github.com/internetarchive/openlibrary/issues/7667" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/issues/7667</a>. When performing upgrades on production servers, follow a similar process to <a href="https://github.com/internetarchive/openlibrary/wiki/Disaster-Recovery-&amp;-Immediate-Response#responding-to-a-outage" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/wiki/Disaster-Recovery-&amp;-Immediate-Response#responding-to-a-outage</a> re:</p><ul><li>[ ] create a new tracking issue on GitHub to keep notes and track progress.</li><li>[ ] notifying the #openlibrary channel and ensuring other staff are available prior to performing a deploy (try to get a 👍 from other staff to confirm)</li><li>[ ] provide evidence in our announcement that a previous test succeeded (if possible) on a non-critical-path machine (dev1, web1, web2, solr1, solr0, ol-covers, ol-home0, ol-www0] -- in this order)</li><li>[ ] In advance of the upgrade, suggest a path for reversion (e.g. have a strategy to roll-back if possible)</li></ul><p>Order of upgrades -- Wait for each one fully reboot and ensure that it works as expected (take good notes!):</p><ul><li>ol-dev</li><li>ol-web1</li><li>ol-web2</li><li>ol-solr1</li><li>ol-solr2</li><li>ol-covers</li><li>ol-home</li><li>ol-www0 See: <a href="https://github.com/internetarchive/openlibrary/pull/7626#discussion_r1133252975" target="_blank" rel="noreferrer">https://github.com/internetarchive/openlibrary/pull/7626#discussion_r1133252975</a></li></ul>`,27)]))}const m=t(n,[["render",i]]);export{b as __pageData,m as default};
