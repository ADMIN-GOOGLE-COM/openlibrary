import{_ as o,c as n,o as a,ag as r}from"./chunks/framework.BRQrZDXk.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"6_Advanced/Production-Service-Architecture_old.md","filePath":"6_Advanced/Production-Service-Architecture_old.md"}'),i={name:"6_Advanced/Production-Service-Architecture_old.md"};function s(t,e,l,p,c,d){return a(),n("div",null,e[0]||(e[0]=[r(`<h2 id="updates" tabindex="-1">UPDATES <a class="header-anchor" href="#updates" aria-label="Permalink to &quot;UPDATES&quot;">​</a></h2><ul><li>2019: <code>ol-mem[0-2]</code> trusty VMs have been reprovisioned as <code>ol-mem[3-5]</code> following the <a href="https://github.com/internetarchive/openlibrary/wiki/Provisioning-Guide" target="_blank" rel="noreferrer">Provisioning Guide</a></li></ul><h2 id="current-production-architecture" tabindex="-1">Current Production Architecture <a class="header-anchor" href="#current-production-architecture" aria-label="Permalink to &quot;Current Production Architecture&quot;">​</a></h2><p>Today, our production service architecture consists of ~11 VMs: <img src="https://archive.org/download/openlibrary-documentation/openlibrary-production-architecture.png" alt="Open Library Production Architecture"></p><h2 id="current-provisioning-setup" tabindex="-1">Current Provisioning Setup <a class="header-anchor" href="#current-provisioning-setup" aria-label="Permalink to &quot;Current Provisioning Setup&quot;">​</a></h2><p>Our current production setup process (as of 2019) for provisioning these 11 VMs is ostensibly <strong>manual</strong> and relies on a lot of manually <code>scp</code>ing directories around, as well as a separate repository called <code>olsystem</code> which contains the production configs, cron jobs, and infrastructure required to run the official openlibrary.org service.</p><p>Each of our 11 VMs are more-or-less provisioned identically:</p><ul><li>Every VM has an <code>/opt</code> directory containing all the &quot;business&quot;</li><li>Within <code>/opt</code> there is an <code>openlibrary/</code> and a <code>petabox/</code> directory. It&#39;s very likely <code>/opt/petabox</code> is not required by all VMs, though it&#39;s not currently well understood which services may rely on it (e.g. the <code>ol-home</code> VM makes heavy use of <code>olsystem</code> which may reference petabox)</li><li><code>/opt/openlibrary</code> contains all the business logic for the Open Library project:</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/opt/</span></span>
<span class="line"><span>/opt/petabox</span></span>
<span class="line"><span>/opt/openlibrary</span></span>
<span class="line"><span>/opt/openlibrary/venv  -- python virtualenv</span></span>
<span class="line"><span>/opt/openlibrary/maxmind-geoip/  -- .dat file for anonymizing IPs</span></span>
<span class="line"><span>/opt/openlibrary/deploys  -- history of all deploys, hash-binned by service</span></span>
<span class="line"><span>/opt/openlibrary/deploys/openlibrary  -- history of openlibrary deploys</span></span>
<span class="line"><span>/opt/openlibrary/deploys/olsystem  -- history of openlibrary deploys</span></span>
<span class="line"><span>/opt/openlibrary/deploys/base  -- deprecated??</span></span>
<span class="line"><span>/opt/openlibrary/deploys/openlibrary/openlibrary  -- active openlibrary deploy</span></span>
<span class="line"><span>/opt/openlibrary/deploys/openlibrary/openlibrary  -- active olsystem deploy</span></span>
<span class="line"><span>/opt/openlibrary/olsystem/  -- symlink to active olsystem: /opt/deploys/openlibrary/olsystem</span></span>
<span class="line"><span>/opt/openlibrary/openlibrary -- symlink to active openlibrary: /opt/deploys/openlibrary/olsystem</span></span></code></pre></div><p>At minimum, re-provisioning a VM requires:</p><ul><li>setting up firewall rules and installing core packages (e.g. git, docker) by running an ansible playbook</li><li><code>scp</code>&#39;ing over the legacy VM&#39;s <code>/opt</code> directory (preferably as an external mountable <code>/1</code> volume which can be moved in the future)</li><li>Setting up <code>olsystem</code> so that its files within <code>/opt/openlibrary/olsystem/etc</code> symlink to the right locations within <code>/etc</code></li></ul>`,11)]))}const h=o(i,[["render",s]]);export{y as __pageData,h as default};
